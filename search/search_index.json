{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd16 DroidMind \ud83e\udde0","text":"<p>Control Android devices with AI through the Model Context Protocol</p> <p>DroidMind is your visionary copilot for Android mastery, bridging the gap between your AI assistant and Android devices. It leverages the Model Context Protocol (MCP) to unlock unparalleled control, debugging, and system analysis capabilities\u2014all through natural language.</p> <p>Imagine your AI assistant not just talking about code, but actively participating in the development loop: building, testing, and debugging directly on your Android devices. DroidMind makes this a reality.</p>"},{"location":"#what-is-droidmind","title":"\ud83c\udf0c What is DroidMind?","text":"<p>DroidMind transforms how you interact with Android. It's a sophisticated server that securely exposes Android Debug Bridge (ADB) functionalities as MCP resources and tools. This allows AI assistants like Claude, Cursor, and other MCP-compatible clients to:</p> <ul> <li>Directly Control Devices: Execute commands, manage files, and automate UI interactions.</li> <li>Analyze and Diagnose: Retrieve logs, inspect device properties, and capture diagnostic information.</li> <li>Streamline Workflows: Integrate device interactions seamlessly into your AI-driven development process.</li> </ul> <p>Whether you're an app developer, a ROM creator, or a system analyst, DroidMind empowers your AI assistant to become an active partner in your Android endeavors.</p>"},{"location":"#core-philosophy","title":"\ud83d\udca1 Core Philosophy","text":"<p>DroidMind is built on the principles of:</p> <ul> <li>AI-First Interaction: Designed from the ground up to be primarily used through AI assistants. The focus is on natural language commands and AI-driven workflows.</li> <li>Security and Control: Robust security measures ensure that all operations are validated, and high-risk actions require explicit user confirmation. You are always in control.</li> <li>Extensibility: While powerful out-of-the-box, DroidMind's architecture is modular, ready for future enhancements.</li> <li>Ease of Use: Simplifies complex Android interactions into intuitive requests you can make to your AI.</li> </ul>"},{"location":"#dive-in","title":"\ud83d\ude80 Dive In","text":"<p>Ready to explore the future of AI-assisted Android development?</p> <ul> <li>Installation Guide: Get DroidMind set up on your system.</li> <li>Docker Guide: Run DroidMind in a containerized environment.</li> <li>Quick Start: Connect DroidMind to your AI assistant and try your first commands.</li> <li>User Manual: A deep dive into all of DroidMind's capabilities.</li> <li>MCP Reference: Details on the specific MCP tools and resources DroidMind provides.</li> </ul> <p>Let DroidMind revolutionize your Android workflow, making you faster, freer, and more brilliant! \ud83c\udf20</p>"},{"location":"docker/","title":"\ud83d\udc33 Running DroidMind with Docker","text":"<p>Docker provides a convenient way to run DroidMind in a containerized, consistent environment. This guide covers building the DroidMind Docker image and running it with various configurations.</p>"},{"location":"docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker: Ensure Docker Desktop (for Mac/Windows) or Docker Engine (for Linux) is installed and running on your system. Get Docker.</li> <li>DroidMind Source Code: You'll need the DroidMind source code, specifically the <code>Dockerfile</code>, to build the image. If you haven't already, clone the repository:   <pre><code>git clone https://github.com/hyperbliss/droidmind.git\ncd droidmind\n</code></pre></li> </ul>"},{"location":"docker/#building-the-docker-image","title":"\ud83d\udce6 Building the Docker Image","text":"<p>Navigate to the root directory of the DroidMind project (where the <code>Dockerfile</code> is located) and run the following command to build the image:</p> <pre><code>docker build -t droidmind:latest .\n</code></pre> <p>This command builds a Docker image tagged as <code>droidmind:latest</code> using the instructions in the <code>Dockerfile</code>.</p>"},{"location":"docker/#running-the-docker-container","title":"\u0db0 Running the Docker Container","text":"<p>Once the image is built, you can run DroidMind as a container. The <code>entrypoint.sh</code> script within the Docker image handles how DroidMind starts based on environment variables and command-line arguments.</p>"},{"location":"docker/#interactive-cli-stdio-transport-default","title":"Interactive CLI (Stdio Transport - Default)","text":"<p>By default, the container runs DroidMind with <code>stdio</code> transport, ideal for direct command-line interaction if you were to exec into the container or use it as part of a script.</p> <pre><code>docker run -it --rm --name droidmind-cli droidmind:latest\n</code></pre> <ul> <li><code>-it</code>: Runs the container in interactive mode with a pseudo-TTY.</li> <li><code>--rm</code>: Automatically removes the container when it exits.</li> <li><code>--name droidmind-cli</code>: Assigns a name to the container for easier management.</li> </ul> <p>To pass specific arguments to <code>droidmind</code> when using <code>stdio</code> mode directly (less common for typical AI assistant use):</p> <pre><code>docker run -it --rm --name droidmind-cli droidmind:latest droidmind --your-stdio-options\n</code></pre>"},{"location":"docker/#sse-transport-recommended-for-ai-assistants","title":"\ud83c\udf10 SSE Transport (Recommended for AI Assistants)","text":"<p>To connect DroidMind with AI assistants like Claude Desktop or other MCP clients, you'll typically use the SSE (Server-Sent Events) transport. The <code>entrypoint.sh</code> script is designed to facilitate this.</p> <p>Using the <code>DROIDMIND_TRANSPORT</code> Environment Variable (Recommended):</p> <p>This is the easiest way to run in SSE mode. The entrypoint script will automatically configure DroidMind to listen on <code>0.0.0.0</code> inside the container.</p> <pre><code>docker run -d -p 4256:4256 -e DROIDMIND_TRANSPORT=sse --name droidmind-server droidmind:latest\n</code></pre> <ul> <li><code>-d</code>: Runs the container in detached mode (in the background).</li> <li><code>-p 4256:4256</code>: Maps port 4256 of the container to port 4256 on your host machine. This allows your AI assistant (running on the host) to connect to DroidMind (running in the container).</li> <li><code>-e DROIDMIND_TRANSPORT=sse</code>: Tells the entrypoint script to start DroidMind in SSE mode.</li> <li><code>--name droidmind-server</code>: Assigns a name to the container.</li> </ul> <p>Your AI assistant can then connect to <code>sse://localhost:4256/sse</code> (or <code>sse://&lt;your-host-ip&gt;:4256/sse</code> if connecting from a different machine on your network).</p> <p>Overriding the Command for SSE:</p> <p>You can also explicitly specify all DroidMind arguments:</p> <pre><code>docker run -d -p 4256:4256 --name droidmind-server droidmind:latest droidmind --transport sse --host 0.0.0.0 --port 4256\n</code></pre> <p>This command tells DroidMind to use SSE transport and listen on all interfaces (<code>0.0.0.0</code>) within the container on port <code>4256</code>.</p>"},{"location":"docker/#connecting-to-adb-devices","title":"\ud83d\udd0c Connecting to ADB Devices","text":"<p>For DroidMind in Docker to control your Android devices, the container needs access to an ADB server that can see your devices. This is the most complex part of using DroidMind with Docker.</p> <p>1. Networked ADB Devices (Recommended for Docker)</p> <p>This is the most straightforward method for Docker setups.</p> <ul> <li>Enable ADB over TCP/IP on your Android device(s):</li> <li>Connect your device via USB to your host machine.</li> <li>Find your device's IP address (usually in Settings &gt; About phone &gt; Status &gt; IP address).</li> <li>Run <code>adb tcpip 5555</code> (or another port if you prefer).</li> <li>Disconnect the USB cable.</li> <li>Run <code>adb connect &lt;device_ip_address&gt;:5555</code> from your host machine to confirm it works.</li> <li>Ensure your Docker container's network configuration allows outbound connections to your device's IP address on your local network. If you're using default Docker networking (bridge), this usually works out of the box as long as your host firewall isn't blocking it.</li> <li>Once DroidMind is running in the container, you can use its <code>connect_device</code> tool (via your AI assistant) to connect to <code>&lt;device_ip_address&gt;:5555</code>.</li> </ul> <p>2. USB-Connected ADB Devices (Advanced)</p> <p>Connecting to USB devices from within a Docker container is platform-dependent and can be challenging.</p> <ul> <li> <p>Option A: Use the Host's ADB Server (More Common)   The idea is to make the Docker container use the ADB server already running on your host machine.</p> </li> <li> <p>Linux: You might share the host's network: <code>docker run --network host ...</code>. This gives the container direct access to the host's network interfaces, including the ADB server. Note: <code>--network host</code> has security implications.</p> </li> <li>macOS/Windows: Docker Desktop runs in a virtual machine, making direct host ADB server access trickier. You might need to forward the ADB server port (default 5037) from the host to the Docker VM or container, or use solutions that share the ADB server socket if available for your Docker version.</li> <li> <p>You might need to set the <code>ADB_SERVER_SOCKET</code> environment variable inside the container to point to the correct socket (e.g., <code>tcp:host.docker.internal:5037</code> if you can forward the port, or a mounted socket path).</p> </li> <li> <p>Option B: Run an ADB Server Inside the Container (More Complex)   This involves passing USB device access into the container and running an ADB server within it.</p> </li> <li>This often requires running the container in <code>--privileged</code> mode, which has significant security implications.</li> <li>You'd need to mount the USB device bus, e.g., <code>-v /dev/bus/usb:/dev/bus/usb</code> (Linux specific).</li> <li>The DroidMind Docker image includes <code>android-sdk-platform-tools</code>, so an ADB server can be started inside it. However, making this server see host-connected USB devices is the main challenge.</li> </ul> <p>\u2728 Recommendation: For ease of use with Docker, connecting your Android devices via ADB over TCP/IP is strongly recommended. It avoids the complexities of USB passthrough and host ADB server sharing.</p>"},{"location":"docker/#customizing-droidmind-arguments","title":"\u2699\ufe0f Customizing DroidMind Arguments","text":"<p>You can append DroidMind-specific arguments to your <code>docker run</code> command. The <code>entrypoint.sh</code> script is designed to pass these along to the <code>droidmind</code> executable.</p> <ul> <li>If <code>DROIDMIND_TRANSPORT</code> is set (e.g., to <code>sse</code>): The script will inject <code>--transport sse --host 0.0.0.0 --port 4256</code> (or the value of <code>DROIDMIND_PORT</code> if set). You can still add other DroidMind arguments.</li> </ul> <p>Example: Run with SSE (handled by env var), a custom ADB path, and debug mode:</p> <pre><code>docker run -d -p 4256:4256 \\\n  -e DROIDMIND_TRANSPORT=sse \\\n  -e ADB_SERVER_SOCKET=tcp:host.docker.internal:5037 \\ # Example for host ADB on Mac/Win\n  --name droidmind-custom-sse \\\n  droidmind:latest droidmind --adb-path /custom/adb --debug\n</code></pre> <ul> <li>If <code>DROIDMIND_TRANSPORT</code> is NOT set: The script assumes you will provide all necessary arguments, including <code>--transport</code> if you don't want stdio.</li> </ul> <p>Example: Explicitly specify all options for SSE on a different port:</p> <pre><code>docker run -d -p 8000:8000 \\\n  --name droidmind-explicit-sse \\\n  droidmind:latest droidmind --transport sse --host 0.0.0.0 --port 8000 --log-level DEBUG\n</code></pre>"},{"location":"docker/#viewing-logs","title":"\ud83d\udcdc Viewing Logs","text":"<p>If you're running DroidMind in detached mode (<code>-d</code>), you can view its logs (output to stdout/stderr in the container) using:</p> <pre><code>docker logs &lt;container_name_or_id&gt;\n</code></pre> <p>For example:</p> <pre><code>docker logs droidmind-server\n</code></pre> <p>To follow the logs in real-time:</p> <pre><code>docker logs -f droidmind-server\n</code></pre>"},{"location":"docker/#next-steps","title":"\u2705 Next Steps","text":"<ul> <li>Quick Start Guide: Learn how to connect DroidMind (whether running in Docker or locally) to your AI assistant.</li> <li>User Manual: Explore all the features DroidMind offers.</li> </ul>"},{"location":"installation/","title":"\ud83d\ude80 Installation Guide","text":"<p>Get DroidMind up and running on your system. This guide covers the primary ways to install DroidMind, whether you want a quick setup for IDE integration or a full manual installation.</p>"},{"location":"installation/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you meet the following requirements:</p> <ul> <li>Python: DroidMind requires Python 3.13 or higher. You can download Python from the official website.</li> <li>UV: We strongly recommend using <code>uv</code> for project and package management. It's a fast, modern Python package installer and resolver. Follow the official uv installation guide.</li> <li>Android Device: An Android device (physical or emulator) with USB debugging enabled.</li> <li>ADB (Android Debug Bridge): ADB must be installed and accessible in your system's PATH. ADB is part of the Android SDK Platform Tools.</li> <li>(Optional for Network Control): If you plan to connect to devices over Wi-Fi, ensure your Android device has ADB over TCP/IP enabled and is on the same network as the machine running DroidMind.</li> </ul>"},{"location":"installation/#installation-methods","title":"\u2699\ufe0f Installation Methods","text":"<p>Choose the installation method that best suits your needs:</p>"},{"location":"installation/#method-1-quick-ide-integration-via-uvx","title":"Method 1: Quick IDE Integration (via <code>uvx</code>)","text":"<p>This method is ideal for quickly running DroidMind as an MCP server, for example, within an IDE that supports the Model Context Protocol (like Cursor). It uses <code>uvx</code> to run DroidMind directly from its latest version on GitHub, meaning no manual cloning or installation of DroidMind is required first.</p> <p>This setup configures your IDE to launch DroidMind, typically using <code>stdio</code> transport for direct interaction or <code>sse</code> if needed by the client.</p> <ol> <li>Ensure <code>uv</code> is installed. (See Prerequisites).</li> <li>Configure your IDE: You'll instruct your IDE to run DroidMind by adding a configuration to its MCP server settings file (e.g., <code>.cursor/mcp.json</code> for Cursor). See the Quick Start Guide for the exact JSON configuration and details on how your IDE will use <code>uvx</code> to fetch and run DroidMind.</li> </ol> <p>This <code>uvx</code>-based approach is excellent for a seamless experience, development, and testing, as your IDE handles DroidMind's lifecycle.</p>"},{"location":"installation/#method-2-manual-installation-from-source","title":"Method 2: Manual Installation (from Source)","text":"<p>This method gives you a local copy of the DroidMind codebase, allowing for development or more permanent setups.</p> <ol> <li> <p>Clone the Repository:     Open your terminal and clone the DroidMind repository from GitHub:</p> <pre><code>git clone https://github.com/hyperb1iss/droidmind.git\ncd droidmind\n</code></pre> </li> <li> <p>Create and Activate Virtual Environment:     Using <code>uv</code>, create a virtual environment:</p> <pre><code>uv venv\n</code></pre> <p>Activate the environment:</p> <ul> <li>On macOS and Linux:   <pre><code>source .venv/bin/activate\n</code></pre></li> <li>On Windows (PowerShell):   <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre></li> <li>On Windows (CMD):   <pre><code>.venv\\Scripts\\activate.bat\n</code></pre></li> </ul> </li> <li> <p>Install Dependencies:     With the virtual environment activated, install DroidMind and its dependencies. Choose the extras based on your needs:</p> <ul> <li>For SSE Transport (Recommended for AI Assistant web UIs, Claude Desktop, etc.): <pre><code>uv pip install -e .[sse]\n</code></pre></li> <li>For Stdio Transport (Direct terminal interaction): <pre><code>uv pip install -e .[stdio]\n</code></pre></li> <li>For Development (includes all dependencies, plus dev tools): <pre><code>uv pip install -e .[dev,sse]\n</code></pre>   (Note: <code>dev</code> typically includes <code>stdio</code> and <code>sse</code> specific dependencies if structured that way in <code>pyproject.toml</code>)</li> </ul> </li> </ol>"},{"location":"installation/#running-droidmind","title":"\ud83c\udfc3\u200d\u2640\ufe0f Running DroidMind","text":"<p>After installation (primarily for Method 2, as <code>uvx</code> runs it directly):</p> <ul> <li>Stdio Mode (Direct Terminal Interaction):</li> </ul> <pre><code>droidmind\n</code></pre> <p>Or, to be explicit:</p> <pre><code>droidmind --transport stdio\n</code></pre> <ul> <li>SSE Mode (for AI Assistants like Claude Desktop, Web UIs):   <pre><code>droidmind --transport sse\n</code></pre>   By default, this will start an SSE server at <code>http://localhost:4256</code>. The MCP connection URI for your AI assistant will typically be <code>sse://localhost:4256/sse</code>.</li> </ul>"},{"location":"installation/#docker-installation","title":"\ud83d\udc33 Docker Installation","text":"<p>For a containerized setup, DroidMind can also be run using Docker. This is useful for creating a consistent environment and simplifying deployment. Refer to our Docker Guide for detailed instructions.</p>"},{"location":"installation/#next-steps","title":"\u2705 Next Steps","text":"<p>With DroidMind installed and running:</p> <ul> <li>Quick Start Guide: Learn how to connect DroidMind to your AI assistant and start issuing commands.</li> <li>Configure your AI Assistant: Refer to your AI assistant's documentation (e.g., Claude Desktop, Cursor) on how to connect to an MCP server using the appropriate URI (e.g., <code>sse://localhost:4256/sse</code> for SSE mode).</li> </ul> <p>Happy DroidMinding! \ud83d\udcab</p>"},{"location":"license/","title":"License","text":"Full License Text <pre><code>Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n     (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n\n     (b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n\n     (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\n     (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\n     You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"license/#license","title":"License","text":"<p>DroidMind is licensed under the Apache License, Version 2.0.</p> <p>A copy of the license is included in the root of the DroidMind repository (<code>LICENSE</code>) and a summary is provided above for convenience.</p>"},{"location":"mcp-reference/","title":"DroidMind MCP Tool Reference","text":"<p>Welcome to the DroidMind MCP Tool Reference. This section provides a quick overview of all the tools DroidMind exposes to your AI assistant via the Model Context Protocol (MCP).</p> <p>Each tool is designed to perform a specific action on your connected Android devices. Your AI assistant intelligently chooses and combines these tools based on your natural language requests.</p>"},{"location":"mcp-reference/#available-tools","title":"\ud83d\udee0\ufe0f Available Tools","text":"<p>Below is a categorized list of DroidMind tools. For detailed parameters, refer to the specific tool documentation (future enhancement) or explore them through an MCP-compatible client that can list tool schemas (like the MCP Inspector or potentially your AI assistant itself).</p>"},{"location":"mcp-reference/#device-connection-management","title":"Device Connection &amp; Management","text":"<ul> <li><code>android-device</code>: Performs various device management operations on Android devices.</li> <li><code>action</code>: Specifies the operation. One of:<ul> <li><code>list_devices</code>: Lists all connected Android devices and their basic information.</li> <li>No specific arguments required beyond <code>ctx</code>.</li> <li><code>connect_device</code>: Connects to an Android device over TCP/IP (Wi-Fi).</li> <li>Requires: <code>ip_address</code>.</li> <li>Optional: <code>port</code> (default 5555).</li> <li><code>disconnect_device</code>: Disconnects from a specified Android device.</li> <li>Requires: <code>serial</code>.</li> <li><code>device_properties</code>: Retrieves detailed system properties of a specific device.</li> <li>Requires: <code>serial</code>.</li> <li><code>reboot_device</code>: Reboots a device into normal, recovery, or bootloader mode.</li> <li>Requires: <code>serial</code>.</li> <li>Optional: <code>mode</code> (default <code>normal</code>; e.g., <code>recovery</code>, <code>bootloader</code>).</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>serial</code> (optional): Device serial number. See specific <code>action</code> for usage.</li> <li><code>ip_address</code> (optional): IP address for <code>connect_device</code>.</li> <li><code>port</code> (optional): Port for <code>connect_device</code>.</li> <li><code>mode</code> (optional): Reboot mode for <code>reboot_device</code>.</li> <li>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/device_management.py</code> for the most detailed argument requirements for each <code>action</code>.</li> </ul>"},{"location":"mcp-reference/#diagnostics-logging","title":"Diagnostics &amp; Logging","text":"<ul> <li> <p><code>android-diag</code>: Performs diagnostic operations like capturing bug reports or heap dumps.</p> </li> <li> <p><code>serial</code>: Device serial number.</p> </li> <li><code>action</code>: Specifies the diagnostic operation. One of:<ul> <li><code>capture_bugreport</code>: Captures a comprehensive bug report from the device.</li> <li>Optional: <code>output_path</code> (host path for adb to write .zip, temp if empty), <code>include_screenshots</code> (default <code>True</code>), <code>timeout_seconds</code> (default <code>300s</code>).</li> <li><code>dump_heap</code>: Captures a heap dump from a running process.</li> <li>Requires: <code>package_or_pid</code> (app package name or process ID).</li> <li>Optional: <code>output_path</code> (local path for .hprof, temp if empty), <code>native</code> (default <code>False</code> for Java heap), <code>timeout_seconds</code> (default <code>120s</code>).</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>output_path</code> (optional): Path for output file. See action specifics.</li> <li><code>include_screenshots</code> (optional): For <code>capture_bugreport</code>.</li> <li><code>package_or_pid</code> (optional): For <code>dump_heap</code>.</li> <li><code>native</code> (optional): For <code>dump_heap</code>.</li> <li><code>timeout_seconds</code> (optional): Override default timeouts. If 0, action-specific defaults are used.</li> <li> <p>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/diagnostics.py</code> for detailed argument requirements.</p> </li> <li> <p><code>android-log</code>: Performs various log retrieval operations on an Android device.</p> </li> <li><code>serial</code>: Device serial number.</li> <li><code>action</code>: Specifies the operation. One of:<ul> <li><code>get_device_logcat</code>: Fetches general logcat output from a device.</li> <li>Optional: <code>lines</code>, <code>filter_expr</code>, <code>buffer</code>, <code>format_type</code>, <code>max_size</code>.</li> <li><code>get_app_logs</code>: Fetches logcat output filtered for a specific application.</li> <li>Requires: <code>package</code>.</li> <li>Optional: <code>lines</code>.</li> <li><code>get_anr_logs</code>: Retrieves Application Not Responding (ANR) traces.</li> <li>No specific arguments beyond <code>serial</code> and <code>ctx</code>.</li> <li><code>get_crash_logs</code>: Fetches application crash reports.</li> <li>No specific arguments beyond <code>serial</code> and <code>ctx</code>.</li> <li><code>get_battery_stats</code>: Gets battery statistics and history.</li> <li>No specific arguments beyond <code>serial</code> and <code>ctx</code>.</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>package</code> (optional): Package name for <code>get_app_logs</code>.</li> <li><code>lines</code> (optional): Number of lines for logcat actions.</li> <li><code>filter_expr</code> (optional): Filter for <code>get_device_logcat</code>.</li> <li><code>buffer</code> (optional): Logcat buffer for <code>get_device_logcat</code>.</li> <li><code>format_type</code> (optional): Output format for <code>get_device_logcat</code>.</li> <li><code>max_size</code> (optional): Max output size for <code>get_device_logcat</code>.</li> <li>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/logs.py</code> for detailed argument requirements.</li> </ul>"},{"location":"mcp-reference/#file-system-operations","title":"File System Operations","text":"<ul> <li><code>android-file</code>: Performs a variety of file and directory operations on an Android device.</li> <li><code>serial</code>: Device serial number.</li> <li><code>action</code>: Specifies the operation. One of:<ul> <li><code>list_directory</code>: Lists contents of a directory on the device.</li> <li>Requires: <code>path</code> (directory path on device).</li> <li><code>push_file</code>: Uploads a file from the DroidMind server's machine to the device.</li> <li>Requires: <code>local_path</code> (source on server), <code>device_path</code> (destination on device).</li> <li><code>pull_file</code>: Downloads a file from the device to the DroidMind server's machine.</li> <li>Requires: <code>device_path</code> (source on device), <code>local_path</code> (destination on server).</li> <li><code>delete_file</code>: Deletes a file or directory.</li> <li>Requires: <code>path</code> (path to delete on device).</li> <li><code>create_directory</code>: Creates a directory.</li> <li>Requires: <code>path</code> (directory path to create on device).</li> <li><code>file_exists</code>: Checks if a file or directory exists.</li> <li>Requires: <code>path</code> (path to check on device). Returns: <code>bool</code>.</li> <li><code>read_file</code>: Reads file content.</li> <li>Requires: <code>device_path</code> (or <code>path</code>) for the file on device.</li> <li>Optional: <code>max_size</code> (defaults to 100KB).</li> <li><code>write_file</code>: Writes content to a file.</li> <li>Requires: <code>device_path</code> (or <code>path</code>) for the file on device, <code>content</code> (text to write).</li> <li><code>file_stats</code>: Gets file/directory statistics.</li> <li>Requires: <code>path</code> (path on device).</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>path</code> (optional): General device path. See specific <code>action</code> for usage.</li> <li><code>local_path</code> (optional): Server-side path for <code>push_file</code>/<code>pull_file</code>.</li> <li><code>device_path</code> (optional): Device-side path. See specific <code>action</code> for usage. Takes precedence over <code>path</code> if both are provided for read/write.</li> <li><code>content</code> (optional): Text content for <code>write_file</code>.</li> <li><code>max_size</code> (optional): Max size for <code>read_file</code>.</li> <li>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/file_operations.py</code> for the most detailed argument requirements for each <code>action</code>.</li> </ul>"},{"location":"mcp-reference/#application-management","title":"Application Management","text":"<ul> <li><code>android-app</code>: Performs various application management operations on an Android device.</li> <li><code>serial</code>: Device serial number.</li> <li><code>action</code>: Specifies the operation. One of:<ul> <li><code>install_app</code>: Installs an APK on the device.</li> <li>Requires: <code>apk_path</code> (local path to APK on DroidMind server).</li> <li>Optional: <code>reinstall</code> (default <code>False</code>), <code>grant_permissions</code> (default <code>True</code>).</li> <li><code>uninstall_app</code>: Uninstalls an application from the device.</li> <li>Requires: <code>package</code> (package name).</li> <li>Optional: <code>keep_data</code> (default <code>False</code>).</li> <li><code>start_app</code>: Starts an application.</li> <li>Requires: <code>package</code> (package name).</li> <li>Optional: <code>activity</code> (specific activity to launch).</li> <li><code>stop_app</code>: Force stops an application.</li> <li>Requires: <code>package</code> (package name).</li> <li><code>clear_app_data</code>: Clears data and cache for an application.</li> <li>Requires: <code>package</code> (package name).</li> <li><code>list_packages</code>: Lists installed application packages.</li> <li>Optional: <code>include_system_apps</code> (default <code>False</code>).</li> <li><code>get_app_manifest</code>: Gets the AndroidManifest.xml contents for an app.</li> <li>Requires: <code>package</code> (package name).</li> <li><code>get_app_permissions</code>: Gets permissions used by an app, including runtime status.</li> <li>Requires: <code>package</code> (package name).</li> <li><code>get_app_activities</code>: Gets the activities defined in an app, including intent filters and main activity.</li> <li>Requires: <code>package</code> (package name).</li> <li><code>get_app_info</code>: Retrieves detailed information about an installed application.</li> <li>Requires: <code>package</code> (package name).</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>package</code> (optional): Package name. See specific <code>action</code> for usage.</li> <li><code>apk_path</code> (optional): Local path to APK for <code>install_app</code>.</li> <li><code>reinstall</code> (optional): For <code>install_app</code>.</li> <li><code>grant_permissions</code> (optional): For <code>install_app</code>.</li> <li><code>keep_data</code> (optional): For <code>uninstall_app</code>.</li> <li><code>activity</code> (optional): Specific activity for <code>start_app</code>.</li> <li><code>include_system_apps</code> (optional): For <code>list_packages</code>.</li> <li>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/app_management.py</code> for the most detailed argument requirements for each <code>action</code>.</li> </ul>"},{"location":"mcp-reference/#shell-command-execution","title":"Shell Command Execution","text":"<ul> <li><code>android-shell</code>: Executes an arbitrary shell command on the device.</li> <li><code>serial</code>: Device serial number.</li> <li><code>command</code>: The shell command string.</li> <li><code>max_lines</code> (optional): Limit output lines.</li> <li><code>max_size</code> (optional): Limit output characters.</li> </ul>"},{"location":"mcp-reference/#ui-automation","title":"UI Automation","text":"<ul> <li> <p><code>android-ui</code>: Performs various UI interaction operations on an Android device.</p> </li> <li> <p><code>serial</code>: Device serial number.</p> </li> <li><code>action</code>: Specifies the UI operation. One of:<ul> <li><code>tap</code>: Simulates a tap at specified screen coordinates.</li> <li>Requires: <code>x</code>, <code>y</code> (coordinates to tap).</li> <li><code>swipe</code>: Simulates a swipe gesture.</li> <li>Requires: <code>start_x</code>, <code>start_y</code>, <code>end_x</code>, <code>end_y</code> (swipe coordinates).</li> <li>Optional: <code>duration_ms</code> (swipe duration, default 300ms).</li> <li><code>input_text</code>: Inputs text into the currently focused field.</li> <li>Requires: <code>text</code> (text to input).</li> <li><code>press_key</code>: Simulates pressing an Android keycode.</li> <li>Requires: <code>keycode</code> (Android keycode, e.g., 3 for HOME, 4 for BACK).</li> <li><code>start_intent</code>: Starts an app activity using an intent.</li> <li>Requires: <code>package</code> (package name), <code>activity</code> (activity name, relative or fully qualified).</li> <li>Optional: <code>extras</code> (dictionary of intent extras).</li> </ul> </li> <li><code>ctx</code>: MCP Context.</li> <li><code>x</code> (optional): X coordinate for <code>tap</code>.</li> <li><code>y</code> (optional): Y coordinate for <code>tap</code>.</li> <li><code>start_x</code> (optional): Starting X for <code>swipe</code>.</li> <li><code>start_y</code> (optional): Starting Y for <code>swipe</code>.</li> <li><code>end_x</code> (optional): Ending X for <code>swipe</code>.</li> <li><code>end_y</code> (optional): Ending Y for <code>swipe</code>.</li> <li><code>duration_ms</code> (optional): Duration for <code>swipe</code>.</li> <li><code>text</code> (optional): Text for <code>input_text</code>.</li> <li><code>keycode</code> (optional): Keycode for <code>press_key</code>.</li> <li><code>package</code> (optional): Package name for <code>start_intent</code>.</li> <li><code>activity</code> (optional): Activity name for <code>start_intent</code>.</li> <li><code>extras</code> (optional): Dictionary for <code>start_intent</code>.</li> <li> <p>Note: Refer to the tool's main Python docstring in <code>droidmind/tools/ui.py</code> for the most detailed argument requirements for each <code>action</code>.</p> </li> <li> <p><code>android-screenshot</code>: Captures a screenshot from the device.</p> </li> <li><code>serial</code>: Device serial number.</li> <li><code>quality</code> (optional): JPEG quality (1-100, default 75).</li> </ul> <p>This reference provides a quick lookup for the tools DroidMind offers. Your AI assistant will use these to fulfill your requests for interacting with your Android devices.</p>"},{"location":"quickstart/","title":"\ud83d\ude80 Quick Start Guide","text":"<p>Welcome to DroidMind! This guide will help you quickly connect DroidMind to your AI assistant and run your first commands. Let's get you to that \"Aha!\" moment. \u2728</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &amp; UV: Ensure Python 3.13+ and <code>uv</code> are installed. DroidMind uses <code>uvx</code> for zero-install IDE integration.</li> <li>AI Assistant with MCP Support: You'll need an AI assistant that supports the Model Context Protocol (MCP). Examples include Claude Desktop, Cursor, or others listed here.</li> <li>Android Device/Emulator: Have an Android device connected via USB (with USB debugging enabled) or an emulator running. For network connections, ensure ADB over TCP/IP is set up.</li> <li>ADB: ADB must be installed and in your system PATH.</li> </ul>"},{"location":"quickstart/#1-configure-your-ide-to-run-droidmind-via-uvx","title":"1. Configure Your IDE to Run DroidMind (via <code>uvx</code>)","text":"<p>The quickest way to get started with DroidMind and an IDE (like Cursor) is to let the IDE manage DroidMind using <code>uvx</code>. This means you don't need to manually install or run DroidMind first.</p> <p>Your IDE will look for a configuration file (e.g., <code>.cursor/mcp.json</code> for Cursor) to know how to launch MCP servers. You'll add an entry for DroidMind:</p> <pre><code>{\n  \"mcpServers\": {\n    \"droidmind\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/hyperb1iss/droidmind\",\n        \"droidmind\",\n        \"--transport\",\n        \"stdio\" // The default and preferred mode for most IDE integrations\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li><code>command: \"uvx\"</code>: Tells the IDE to use <code>uvx</code>.</li> <li><code>\"--from\", \"git+https://github.com/hyperb1iss/droidmind\"</code>: <code>uvx</code> will fetch DroidMind directly from GitHub.</li> <li><code>\"droidmind\"</code>: The package name to run.</li> <li><code>\"--transport\", \"stdio\"</code>: Specifies the communication protocol. <code>stdio</code> is the default and preferred mode for direct IDE integrations.</li> </ul> <p>Once configured, your IDE should automatically start DroidMind when needed. You typically won't see a separate terminal window for DroidMind, as the IDE manages it in the background.</p> <p>For other installation methods (manual, Docker, or running DroidMind separately), see the full Installation Guide. This Quick Start focuses on the zero-install IDE integration.</p>"},{"location":"quickstart/#2-connect-your-ai-assistant-to-droidmind","title":"2. Connect Your AI Assistant to DroidMind","text":"<p>With the <code>mcp.json</code> (or equivalent) configured, your AI assistant should automatically discover and connect to DroidMind when it starts up or when you try to use a DroidMind-related tool.</p> <ul> <li> <p>No Manual Connection URI Needed (Usually): Since the IDE launches DroidMind, the connection is typically handled internally. You usually don't need to manually input an MCP URI.</p> </li> <li> <p>Instructions for Common Clients:</p> </li> <li> <p>Cursor:</p> <ol> <li>Ensure your project has a <code>.cursor/mcp.json</code> file with the DroidMind configuration shown in Step 1.</li> <li>Restart Cursor or open a new project window.</li> <li>Cursor will automatically start DroidMind on startup, making its tools immediately available.</li> </ol> </li> <li> <p>Claude Desktop:</p> <ol> <li>Open Claude Desktop settings (from the main application menu).</li> <li>Go to <code>Developer</code> settings.</li> <li>Click <code>Edit Config</code> to open <code>claude_desktop_config.json</code>.</li> <li>Add or modify the <code>mcpServers</code> section similar to the example below. Claude Desktop is designed to launch MCP servers itself.    <pre><code>{\n  \"mcpServers\": {\n    \"droidmind\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/hyperb1iss/droidmind\",\n        \"droidmind\",\n        \"--transport\",\n        \"stdio\" // Default and preferred for Claude Desktop\n      ]\n      // Add \"workingDirectory\": \"/path/to/your/droidmind/project\" if needed\n      // Add \"env\": { ... } if DroidMind needs specific environment variables\n    }\n  }\n}\n</code></pre></li> <li>Restart Claude Desktop. It will attempt to start DroidMind using this configuration.</li> </ol> </li> </ul> <p>Note on SSE Transport (Alternative Method): If you need to use SSE transport instead of stdio (for specific use cases or compatibility reasons):</p> <ol> <li>You'll need to run the DroidMind server manually with SSE enabled:</li> </ol> <pre><code>uvx --from git+https://github.com/hyperb1iss/droidmind droidmind --transport sse --host localhost --port 4256\n</code></pre> <ol> <li>Then configure your AI client to connect to the SSE endpoint (e.g., <code>sse://localhost:4256/sse</code>).</li> </ol> <p>This approach requires more manual setup but may be necessary for certain client configurations. See the Installation Guide for more details on running DroidMind as a standalone server.</p> <p>After successful connection (which is often automatic with IDE-managed servers), your AI assistant should indicate that DroidMind's tools are available (often indicated by a special icon or prefix in the chat input, or by the AI successfully executing DroidMind commands).</p>"},{"location":"quickstart/#3-your-first-commands","title":"3. Your First Commands!","text":"<p>Now for the fun part! Try asking your AI assistant some questions that will leverage DroidMind's capabilities. Here are a few ideas:</p> <ul> <li>List Connected Devices:</li> </ul> <p>\"Hey AI, can you list all my connected Android devices using DroidMind?\" <code>Response should show a list of devices DroidMind can see via ADB.</code></p> <ul> <li>Device Properties (if a device is connected):   Replace <code>emulator-5554</code> with your actual device serial from the list above.</li> </ul> <p>\"Tell me about the device <code>emulator-5554</code>. What are its properties?\" <code>Response should detail the Android version, model, SDK level, etc., for the specified device.</code></p> <ul> <li>Take a Screenshot (if a device is connected):</li> </ul> <p>\"Take a screenshot of my currently active Android device.\" <code>Your AI assistant should display a screenshot.</code></p> <ul> <li>Check Storage Space:</li> </ul> <p>\"How much storage space is free on <code>emulator-5554</code>?\"</p> <ul> <li>List Installed Apps (Third-Party): <p>\"What apps have I installed on <code>emulator-5554</code>?\"</p> </li> </ul>"},{"location":"quickstart/#troubleshooting","title":"\ud83e\udd14 Troubleshooting","text":"<ul> <li>DroidMind Server Not Starting: Check your terminal for error messages. Ensure Python and dependencies are correctly installed. If using Docker, check <code>docker logs droidmind-server</code>.</li> <li>AI Assistant Can't Connect / Tools Not Working:</li> <li>Double-check your <code>mcp.json</code> (or equivalent) configuration for typos in the command or arguments.</li> <li>Ensure <code>uv</code> is installed and accessible in your system's PATH (as <code>uvx</code> relies on <code>uv</code>).</li> <li>If using <code>sse</code> transport, ensure the specified port (e.g., 4256) is not being used by another application.</li> <li>Check your IDE's output logs or console for any error messages related to starting the MCP server.</li> <li>No Devices Listed (when DroidMind seems to be running):</li> <li>Ensure your Android device has USB debugging enabled and is authorized on your computer.</li> <li>Run <code>adb devices</code> in a separate terminal to see if ADB itself can see your device. If not, DroidMind won't be able to either.</li> <li>If using Docker, refer to the Docker Guide's section on ADB connectivity, as this is often the trickiest part.</li> </ul>"},{"location":"quickstart/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've successfully configured your IDE to run DroidMind on-demand and executed your first commands! This is just the beginning. Explore the User Manual and MCP Reference to discover the full range of what you can achieve with DroidMind.</p> <p>Now, go make your Android workflow more brilliant! \ud83d\udcab</p>"},{"location":"user_manual/","title":"User Manual","text":"<p>Welcome to the DroidMind User Manual! This section provides a comprehensive guide to understanding and utilizing DroidMind's features through your AI assistant.</p> <p>Our goal is to empower you to interact with your Android devices seamlessly using natural language. Whether you're debugging apps, managing files, or analyzing system performance, DroidMind, guided by your AI, is here to assist.</p>"},{"location":"user_manual/#chapters","title":"\ud83d\udcd6 Chapters","text":"<p>Navigate through the chapters to learn about specific DroidMind functionalities:</p> <ul> <li> <p>1. Connecting to Devices</p> </li> <li> <p>Listing available devices</p> </li> <li>Connecting via USB</li> <li>Connecting via TCP/IP (Wi-Fi)</li> <li>Understanding device serials</li> <li> <p>Disconnecting devices</p> </li> <li> <p>2. Device Information &amp; Diagnostics</p> </li> <li> <p>Retrieving device properties (model, Android version, SDK, etc.)</p> </li> <li>Capturing screenshots</li> <li>Working with Logcat (device logs, app-specific logs)</li> <li>Understanding ANR &amp; Crash Logs</li> <li>Analyzing battery statistics</li> <li>Generating bug reports</li> <li> <p>Dumping heap for memory analysis</p> </li> <li> <p>3. File System Operations</p> </li> <li> <p>Listing directory contents</p> </li> <li>Reading file contents</li> <li>Writing content to files</li> <li>Pushing (uploading) files to a device</li> <li>Pulling (downloading) files from a device</li> <li>Creating directories</li> <li>Deleting files and directories</li> <li>Checking if a file or directory exists</li> <li> <p>Getting file/directory statistics (size, permissions, modified date)</p> </li> <li> <p>4. Application Management</p> </li> <li> <p>Listing installed packages (all or third-party)</p> </li> <li>Installing applications (APKs)</li> <li>Uninstalling applications (with or without data)</li> <li>Starting applications (default or specific activity)</li> <li>Stopping applications (force stop)</li> <li>Clearing application data and cache</li> <li>Getting detailed app information (version, path, user ID)</li> <li>Inspecting app manifests</li> <li>Retrieving app permissions</li> <li> <p>Listing app activities</p> </li> <li> <p>5. Shell Command Execution</p> </li> <li> <p>Running shell commands on a device</p> </li> <li>Understanding command risk assessment</li> <li>Output handling (truncation, line limits)</li> <li> <p>Security considerations for shell commands</p> </li> <li> <p>6. UI Automation</p> </li> <li> <p>Tapping on screen coordinates</p> </li> <li>Performing swipe gestures</li> <li>Inputting text into fields</li> <li>Pressing hardware/software keys (Home, Back, Volume, etc.)</li> <li> <p>Starting activities using intents (with extras)</p> </li> <li> <p>7. Device Management Actions</p> </li> <li> <p>Rebooting a device (normal, recovery, bootloader)</p> </li> <li> <p>8. Security Considerations</p> </li> <li> <p>Understanding DroidMind's security model</p> </li> <li>Command validation and sanitization</li> <li> <p>Risk levels and user confirmation for high-risk operations</p> </li> <li> <p>9. Example AI Assistant Queries</p> </li> <li>Practical examples for common tasks across all DroidMind features.</li> </ul>"},{"location":"user_manual/#tips-for-effective-use","title":"\ud83d\udca1 Tips for Effective Use","text":"<ul> <li>Be Specific: When talking to your AI, provide clear details like device serials (if you have multiple) and full paths for files.</li> <li>Iterate: If the first command doesn't do exactly what you want, refine your request. AI assistants learn from interaction.</li> <li>Use Serial Numbers: If you have multiple devices connected, always specify the device serial number in your requests to avoid ambiguity.</li> <li>Check Output: Pay attention to the output DroidMind provides via your AI assistant. It often contains important confirmations or error messages.</li> </ul> <p>Let's begin your journey to mastering Android with DroidMind and AI! \ud83d\udcab</p>"},{"location":"user_manual/app_management/","title":"Chapter 4: Application Management","text":"<p>DroidMind equips your AI assistant with a comprehensive suite of tools for managing applications on your Android devices. This chapter details how to list installed packages, install and uninstall apps, control their lifecycle (start, stop, clear data), and inspect various application details like manifests, permissions, and activities.</p> <p>Remember to replace <code>emulator-5554</code> or <code>your_device_serial</code> with your target device's serial, and use correct package names (e.g., <code>com.example.myapp</code>) in your queries.</p>"},{"location":"user_manual/app_management/#41-listing-installed-packages","title":"4.1 Listing Installed Packages","text":"<p>Discover what applications are installed on a device.</p> <p>How to ask your AI assistant:</p> <p>\"List all installed third-party apps on <code>emulator-5554</code>.\" \"Show me all packages, including system apps, on <code>your_device_serial</code>.\" \"What applications are on <code>emulator-5554</code>?\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>list_packages</code> tool.</p> <ul> <li><code>include_system_apps</code> (optional, default <code>False</code>): Set to <code>True</code> to include system applications in the list. Otherwise, only third-party (user-installed) apps are shown.</li> </ul> <p>Example Response from AI:</p> <pre><code>Okay, here are the installed third-party packages on `emulator-5554`:\n\n# Installed Packages\n\n| Package Name          | APK Path                                      |\n|-----------------------|-----------------------------------------------|\n| `com.example.app1`    | `/data/app/~~random_string==/com.example.app1-another_random==/base.apk` |\n| `com.example.another` | `/data/app/~~different_string==/com.example.another-more_random==/base.apk` |\n| `org.thirdparty.util` | `/data/app/~~and_another==/org.thirdparty.util-random_again==/base.apk` |\n</code></pre>"},{"location":"user_manual/app_management/#42-installing-applications-apks","title":"4.2 Installing Applications (APKs)","text":"<p>Your AI assistant can install applications using their APK files. The APK file must be accessible from the machine where DroidMind is running.</p> <p>How to ask your AI assistant:</p> <p>\"Install the app from <code>/Users/bliss/Downloads/new_app.apk</code> on <code>emulator-5554</code>.\" \"On <code>your_device_serial</code>, install <code>C:\\APKs\\utility.apk</code>, reinstall if it exists, and grant all permissions.\"</p> <p>Important: The <code>apk_path</code> you specify must be a local path on the machine where the DroidMind server process is running.</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>install_app</code> tool.</p> <ul> <li><code>apk_path</code>: The local path to the APK file.</li> <li><code>reinstall</code> (optional, default <code>False</code>): Set to <code>True</code> to allow reinstallation (equivalent to <code>adb install -r</code>).</li> <li><code>grant_permissions</code> (optional, default <code>True</code>): Set to <code>True</code> to grant all declared permissions at install time (equivalent to <code>adb install -g</code>).</li> </ul> <p>Example Response from AI:</p> <pre><code>I'm installing `/Users/bliss/Downloads/new_app.apk` on `emulator-5554`...\n\u2705 Successfully installed APK on device emulator-5554\n</code></pre> <p>Or if it failed:</p> <pre><code>\u274c Failed to install APK: INSTALL_FAILED_INSUFFICIENT_STORAGE\n</code></pre>"},{"location":"user_manual/app_management/#43-uninstalling-applications","title":"4.3 Uninstalling Applications","text":"<p>Remove applications from a device.</p> <p>How to ask your AI assistant:</p> <p>\"Uninstall the package <code>com.example.oldapp</code> from <code>emulator-5554</code>.\" \"Remove <code>com.thirdparty.bloatware</code> from <code>your_device_serial</code> but keep its data.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>uninstall_app</code> tool.</p> <ul> <li><code>package</code>: The package name of the app to uninstall.</li> <li><code>keep_data</code> (optional, default <code>False</code>): Set to <code>True</code> to keep the app's data and cache directories (equivalent to <code>adb uninstall -k</code>).</li> </ul> <p>Example Response from AI:</p> <pre><code>Uninstalling package `com.example.oldapp` from `emulator-5554`...\n\u2705 Successfully uninstalled `com.example.oldapp` from device `emulator-5554`\n</code></pre> <p>Or, if keeping data:</p> <pre><code>\u2705 Successfully uninstalled `com.thirdparty.bloatware` from device `your_device_serial` (keeping app data)\n</code></pre>"},{"location":"user_manual/app_management/#44-starting-applications","title":"4.4 Starting Applications","text":"<p>Launch an application on the device. You can start its default main activity or specify a particular activity.</p> <p>How to ask your AI assistant:</p> <p>\"Start the app <code>com.example.myapp</code> on <code>emulator-5554</code>.\" \"Launch the activity <code>.ui.SettingsActivity</code> for package <code>com.example.myapp</code> on <code>your_device_serial</code>.\" \"Open <code>com.android.settings</code> on <code>emulator-5554</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>start_app</code> tool.</p> <ul> <li><code>package</code>: The package name of the app.</li> <li><code>activity</code> (optional): The specific activity to start. If empty, DroidMind attempts to launch the default main activity. Activity names can be relative (e.g., <code>.MainActivity</code>) or fully qualified (e.g., <code>com.example.myapp.MainActivity</code>).</li> </ul> <p>Example Response from AI:</p> <pre><code>Starting app `com.example.myapp` on `emulator-5554`...\n\u2705 Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.example.myapp/.MainActivity }\n</code></pre> <p>If an error occurs (e.g., app not found, activity not found):</p> <pre><code>\u274c Error: Activity not started, component specified did not match any known component\n</code></pre>"},{"location":"user_manual/app_management/#45-stopping-applications-force-stop","title":"4.5 Stopping Applications (Force Stop)","text":"<p>Forcefully stop a running application.</p> <p>How to ask your AI assistant:</p> <p>\"Stop the app <code>com.example.myapp</code> on <code>emulator-5554</code>.\" \"Force stop <code>com.thirdparty.service</code> on <code>your_device_serial</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>stop_app</code> tool.</p> <p>Example Response from AI:</p> <pre><code>Stopping app `com.example.myapp` on `emulator-5554`...\n\u2705 Force stopped `com.example.myapp`\n</code></pre>"},{"location":"user_manual/app_management/#46-clearing-application-data-and-cache","title":"4.6 Clearing Application Data and Cache","text":"<p>Reset an application to its default state by clearing its data and cache.</p> <p>How to ask your AI assistant:</p> <p>\"Clear the app data for <code>com.example.myapp</code> on <code>emulator-5554</code>.\" \"Reset <code>com.example.anotherapp</code> on <code>your_device_serial</code> by clearing its data.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>clear_app_data</code> tool.</p> <p>Example Response from AI:</p> <pre><code>Clearing data for app `com.example.myapp` on `emulator-5554`...\n\u2705 Successfully cleared data for package `com.example.myapp`\n</code></pre> <p>If it fails:</p> <pre><code>\u274c Failed to clear data for package `com.example.myapp`: Package not found\n</code></pre>"},{"location":"user_manual/app_management/#47-getting-detailed-app-information","title":"4.7 Getting Detailed App Information","text":"<p>Retrieve a summary of information about a specific installed application.</p> <p>How to ask your AI assistant:</p> <p>\"Get detailed information about the app <code>com.android.settings</code> on <code>emulator-5554</code>.\" \"Show me info for <code>com.example.myapp</code> on <code>your_device_serial</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>get_app_info</code> tool.</p> <p>Example Response from AI:</p> <pre><code># App Information for com.android.settings\n\n- **Version**: 12.0\n- **Install Path**: /system/priv-app/SettingsProvider/SettingsProvider.apk\n- **First Install**: 2022-01-01 10:00:00\n- **User ID**: 1000\n- **App Size**: 5.3M (from du -sh)\n- **Status**: Running\n\n## Permissions\n\n- android.permission.ACCESS_NETWORK_STATE\n- android.permission.WRITE_SETTINGS\n...\n</code></pre>"},{"location":"user_manual/app_management/#48-inspecting-app-manifests","title":"4.8 Inspecting App Manifests","text":"<p>The <code>AndroidManifest.xml</code> file contains essential information about an app, including its components, permissions, and features. DroidMind can retrieve and parse this for you.</p> <p>How to ask your AI assistant:</p> <p>\"Show me the manifest for <code>com.example.myapp</code> on <code>emulator-5554</code>.\" \"Get the AndroidManifest for <code>com.android.settings</code> on <code>your_device_serial</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>get_app_manifest</code> tool.</p> <p>Example Response from AI:</p> <pre><code># App Manifest for com.example.myapp\n\n## Package Information\n\n- **Version Code**: 101\n- **Version Name**: 1.0.1\n- **Min SDK**: 23\n- **Target SDK**: 33\n- **Install Path**: /data/app/~~...==/com.example.myapp-...==/base.apk\n- **First Install**: 2023-01-15 10:00:00\n- **User ID**: 10123\n\n## Permissions\n\n### Declared Permissions\n\nNo declared permissions.\n\n### Requested Permissions\n\n- `android.permission.INTERNET`\n- `android.permission.ACCESS_FINE_LOCATION`\n\n## Components\n\n### Activities\n\n- `com.example.myapp/.MainActivity`\n  Intent Filters:\n  - Action: android.intent.action.MAIN\n  - Category: android.intent.category.LAUNCHER\n- `com.example.myapp/.SettingsActivity`\n\n### Services\n\n- `com.example.myapp/.background.MyBackgroundService`\n\n### Content Providers\n\nNo Content Providers found.\n\n### Broadcast Receivers\n\n- `com.example.myapp/.receivers.BootCompletedReceiver`\n  Intent Filters:\n  - Action: android.intent.action.BOOT_COMPLETED\n</code></pre>"},{"location":"user_manual/app_management/#49-retrieving-app-permissions","title":"4.9 Retrieving App Permissions","text":"<p>Focus specifically on the permissions declared and requested by an application, including their runtime status.</p> <p>How to ask your AI assistant:</p> <p>\"What permissions does <code>com.example.myapp</code> use on <code>emulator-5554</code>?\" \"Show the permission details for <code>com.android.camera</code> on <code>your_device_serial</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>get_app_permissions</code> tool.</p> <p>Example Response from AI:</p> <pre><code># Permissions for com.example.myapp\n\n## Permissions\n\n### Declared Permissions\nNo declared permissions.\n\n### Requested Permissions\n- `android.permission.INTERNET`\n- `android.permission.ACCESS_FINE_LOCATION`\n\n## Runtime Permission Status\n</code></pre> <p>runtime permissions: android.permission.ACCESS_FINE_LOCATION: granted=true, flags=[ GRANTED_BY_DEFAULT|REVIEW_REQUIRED ]</p> <pre><code>This app has requested Internet and Fine Location access. Fine Location is currently granted.\n</code></pre>"},{"location":"user_manual/app_management/#410-listing-app-activities","title":"4.10 Listing App Activities","text":"<p>List all the activities defined within an application and identify the main launchable activity.</p> <p>How to ask your AI assistant:</p> <p>\"List the activities for <code>com.example.myapp</code> on <code>emulator-5554</code>.\" \"What are the defined activities in <code>com.android.settings</code> on <code>your_device_serial</code>?\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>get_app_activities</code> tool.</p> <p>Example Response from AI:</p> <pre><code># Activities for com.example.myapp\n\nFound 2 activities:\n\n- `com.example.myapp/.MainActivity`\n  Intent Filters:\n  - Action: android.intent.action.MAIN\n  - Category: android.intent.category.LAUNCHER\n- `com.example.myapp/.SettingsActivity`\n\n## Main Activity\n</code></pre> <p>com.example.myapp/.MainActivity</p> <pre><code>The main launchable activity is `.MainActivity`.\n</code></pre> <p>Up next, we'll cover how to execute general shell commands on your device in Chapter 5: Shell Command Execution.</p>"},{"location":"user_manual/connecting_devices/","title":"Chapter 1: Connecting to Devices","text":"<p>DroidMind empowers your AI assistant to manage connections to your Android devices, whether they're plugged in via USB or available on your network. This chapter covers how to discover, connect to, and disconnect from your devices.</p>"},{"location":"user_manual/connecting_devices/#11-listing-available-devices","title":"1.1 Listing Available Devices","text":"<p>Before you can interact with a device, you need to know its serial number or connection address. DroidMind can list all devices currently recognized by the Android Debug Bridge (ADB) on the machine where DroidMind is running.</p> <p>How to ask your AI assistant:</p> <p>\"Hey AI, can you list all connected Android devices using DroidMind?\" \"Show me the devices DroidMind can see.\" \"What Android devices are available?\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>list_devices</code> tool.</p> <p>Example Response from AI (incorporating DroidMind's output):</p> <pre><code>Okay, I found 2 Android devices connected:\n\n## Device 1: Pixel 6 Pro\n- **Serial**: `1A2B3C4D5E6F`\n- **Android Version**: 13\n\n## Device 2: Android Emulator\n- **Serial**: `emulator-5554`\n- **Android Version**: 12\n</code></pre> <ul> <li>Serial: This is the unique identifier for your device. You'll use this serial number in many other commands to specify which device to target, especially if you have multiple devices connected.</li> <li>USB Devices: Physical devices connected via USB will typically show a hardware serial number (e.g., <code>1A2B3C4D5E6F</code>).</li> <li>Emulators: Android emulators usually have serials like <code>emulator-5554</code>.</li> <li>Networked Devices: Devices connected over TCP/IP will show their IP address and port (e.g., <code>192.168.1.100:5555</code>).</li> </ul> <p>If no devices are listed, ensure your device has USB debugging enabled, is properly connected, and authorized on your computer. For emulators, make sure they are running. If DroidMind is in Docker, review the Docker guide for ADB connectivity.</p>"},{"location":"user_manual/connecting_devices/#12-understanding-device-serials","title":"1.2 Understanding Device Serials","text":"<p>The serial number is crucial for interacting with DroidMind, especially when multiple devices are connected. It's how DroidMind (and ADB) distinguishes between them.</p> <ul> <li>Physical Devices (USB): Typically a unique alphanumeric string (e.g., <code>R5CR707QL9X</code>).</li> <li>Emulators: Usually <code>emulator-XXXX</code> (e.g., <code>emulator-5554</code>, <code>emulator-5556</code>).</li> <li>Networked Devices (TCP/IP): In the format <code>ip_address:port</code> (e.g., <code>192.168.1.123:5555</code>).</li> </ul> <p>When your AI assistant prompts for a device or you initiate a command, be ready to provide the correct serial if you have more than one device listed.</p>"},{"location":"user_manual/connecting_devices/#13-connecting-to-devices-over-tcpip-wi-fi","title":"1.3 Connecting to Devices Over TCP/IP (Wi-Fi)","text":"<p>If your Android device is configured for ADB over Wi-Fi, DroidMind can connect to it.</p> <p>Prerequisites for TCP/IP Connection:</p> <ol> <li>Your Android device and the machine running DroidMind must be on the same network.</li> <li>ADB over TCP/IP must be enabled on your Android device. This usually involves:<ul> <li>Connecting the device via USB first.</li> <li>Running <code>adb tcpip 5555</code> (or another port) from your terminal.</li> <li>Finding your device's IP address (e.g., in Settings &gt; About phone &gt; Status).</li> <li>You can then disconnect the USB cable.</li> </ul> </li> </ol> <p>How to ask your AI assistant:</p> <p>\"Connect to my Android device at IP address <code>192.168.1.101</code>.\" \"DroidMind, please connect to <code>192.168.1.101:5555</code>.\" \"Add a new device: <code>192.168.1.101</code> port <code>5556</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>connect_device</code> tool.</p> <p>Example Response from AI:</p> <pre><code># \u2728 Device Connected Successfully! \u2728\n\n- **Device**: Pixel 7\n- **Connection**: 192.168.1.101:5555\n- **Android Version**: 14\n\nThe device is now available for commands and operations.\n</code></pre> <p>If the connection fails, your AI assistant will relay the error message. Common issues include incorrect IP address/port, device not being on the same network, ADB over TCP/IP not being enabled correctly on the device, or firewall issues.</p>"},{"location":"user_manual/connecting_devices/#14-disconnecting-devices","title":"1.4 Disconnecting Devices","text":"<p>You can explicitly disconnect DroidMind from a device, which is primarily useful for devices connected over TCP/IP. Disconnecting a USB device via this command usually doesn't prevent it from being re-detected by ADB automatically.</p> <p>How to ask your AI assistant:</p> <p>\"Disconnect from the device <code>192.168.1.101:5555</code>.\" \"DroidMind, remove <code>emulator-5554</code> from the list of active connections.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>disconnect_device</code> tool.</p> <p>Example Response from AI:</p> <pre><code>Successfully disconnected from device 192.168.1.101:5555.\n</code></pre> <p>Or, if it wasn't a TCP/IP connection or already disconnected:</p> <pre><code>Device 192.168.1.101:5555 was not connected or could not be disconnected through this command.\n</code></pre> <p>After disconnecting, the device will no longer appear in the <code>list_devices</code> output unless it's a USB device that ADB automatically re-detects, or you explicitly connect to it again.</p> <p>Next, let's explore how to get detailed information and diagnostics from your connected devices in Chapter 2: Device Information &amp; Diagnostics.</p>"},{"location":"user_manual/device_diagnostics/","title":"Chapter 2: Device Information &amp; Diagnostics","text":"<p>Once your Android device is connected, DroidMind, through your AI assistant, can provide a wealth of information about the device and help diagnose issues. This chapter covers retrieving properties, capturing visuals, and diving into various logs and diagnostic reports.</p> <p>Remember to replace <code>emulator-5554</code> or <code>your_device_serial</code> with the actual serial of your target device in the example queries.</p>"},{"location":"user_manual/device_diagnostics/#21-retrieving-device-properties","title":"2.1 Retrieving Device Properties","text":"<p>You can ask your AI assistant to fetch detailed properties of a connected device. This includes information like the device model, brand, Android version, SDK level, build number, and much more.</p> <p>How to ask your AI assistant:</p> <p>\"Tell me about the device <code>emulator-5554</code>.\" \"What are the properties of <code>your_device_serial</code>?\" \"Get device info for <code>emulator-5554</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>device_properties</code> tool.</p> <p>Example Response from AI:</p> <pre><code># Device Properties for emulator-5554\n\n**Model**: sdk_gphone64_x86_64\n**Brand**: google\n**Android Version**: 12\n**SDK Level**: 31\n**Build Number**: SE1A.220601.001\n\n## All Properties\n\n```properties\n[ro.product.model]: [sdk_gphone64_x86_64]\n[ro.product.brand]: [google]\n[ro.build.version.release]: [12]\n[ro.build.version.sdk]: [31]\n[ro.build.display.id]: [SE1A.220601.001]\n[ro.product.manufacturer]: [Google]\n[persist.sys.timezone]: [America/Los_Angeles]\n...\n(many more properties)\n</code></pre> <p>This information is invaluable for understanding the device's hardware and software configuration, which is often crucial for debugging.</p>"},{"location":"user_manual/device_diagnostics/#22-capturing-screenshots","title":"2.2 Capturing Screenshots","text":"<p>A picture is worth a thousand words, especially in UI debugging. DroidMind can capture a screenshot of the device's current display.</p> <p>How to ask your AI assistant:</p> <p>\"Take a screenshot of <code>emulator-5554</code>.\" \"Capture the current screen of <code>your_device_serial</code>.\" \"Show me what's on the screen of <code>emulator-5554</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>screenshot</code> tool. The AI assistant will then typically display the image.</p> <p>Example Response from AI:</p> <pre><code>Okay, here is the screenshot from emulator-5554:\n\n[Image data would be displayed here by the AI assistant]\n\nI've captured the screen. The image shows the device's home screen with several app icons.\n</code></pre> <p>Screenshots are returned as JPEG images by default to save space, with a quality setting of 75. You can specify quality if needed, though most users won't need to.</p>"},{"location":"user_manual/device_diagnostics/#23-working-with-logcat-device-logs","title":"2.3 Working with Logcat (Device Logs)","text":"<p>Logcat is Android's logging system, providing a stream of messages from the system and applications. DroidMind allows you to fetch these logs.</p>"},{"location":"user_manual/device_diagnostics/#231-general-device-logcat","title":"2.3.1 General Device Logcat","text":"<p>Retrieve recent general logs from various buffers on the device.</p> <p>How to ask your AI assistant:</p> <p>\"Show me the last 500 logcat lines from <code>emulator-5554</code>.\" \"Get the device logs for <code>your_device_serial</code>, focusing on the 'crash' buffer.\" \"Fetch logcat from <code>emulator-5554</code> with the filter 'ActivityManager:I *:S' for the last 200 lines.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>device_logcat</code> tool. You can specify:</p> <ul> <li><code>lines</code>: Number of recent lines (default: 1000).</li> <li><code>filter_expr</code>: ADB logcat filter expression (e.g., \"MyAppTag:V *:S\").</li> <li><code>buffer</code>: Log buffer (e.g., <code>main</code>, <code>system</code>, <code>crash</code>, <code>radio</code>, <code>events</code>; default: <code>main</code>).</li> <li><code>format_type</code>: Log output format (e.g., <code>threadtime</code>, <code>brief</code>; default: <code>threadtime</code>).</li> <li><code>max_size</code>: Max characters for the output (default: 100KB).</li> </ul> <p>Example Response from AI:</p> <pre><code># Device Logcat Output \ud83d\udcf1\n\n## Last 500 Lines from 'main' Buffer\n\n```log\n01-15 10:30:01.123  1234  5678 I ActivityManager: Displayed com.example.app/.MainActivity: +100ms\n01-15 10:30:01.456  8765  4321 D MyAppTag: User clicked the login button\n...\n</code></pre> <pre><code>### 2.3.2 App-Specific Logs\n\nFilter logcat output for a specific application package.\n\n**How to ask your AI assistant:**\n\n&gt; \"Get logs for the app `com.example.myapp` on `emulator-5554`.\"\n&gt; \"Show me the last 200 log entries for `com.example.anotherapp` on `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `app_logs` tool.\n*   `package`: The package name of the app.\n*   `lines`: Number of recent lines to fetch (default: 1000).\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/device_diagnostics/#logs-for-app-comexamplemyapp","title":"Logs for App 'com.example.myapp' \ud83d\udcf1","text":""},{"location":"user_manual/device_diagnostics/#recent-log-entries","title":"Recent Log Entries","text":"<pre><code>01-15 10:32:05.678  8765  4321 D com.example.myapp: Login successful for user 'bliss'\n01-15 10:32:05.999  8765  4322 I com.example.myapp.NetworkService: Data sync initiated.\n...\n</code></pre> <p>If no logs are found, it might mean the app isn't running or isn't generating logs with that package name identifier.</p> <pre><code>## 2.4 Understanding ANR &amp; Crash Logs\n\nWhen an app freezes or crashes, Android generates specific diagnostic logs.\n\n### 2.4.1 Application Not Responding (ANR) Traces\n\nANRs occur when the UI thread is blocked for too long.\n\n**How to ask your AI assistant:**\n\n&gt; \"Are there any ANR traces on `emulator-5554`?\"\n&gt; \"Show me the latest ANR logs from `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `device_anr_logs` tool.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/device_diagnostics/#application-not-responding-anr-traces","title":"Application Not Responding (ANR) Traces","text":""},{"location":"user_manual/device_diagnostics/#anr-trace-1-anr_2023-01-15-10-35-00-123txt","title":"ANR Trace #1: anr_2023-01-15-10-35-00-123.txt","text":"<p>File Info: <code>-rw-rw---- 1 system system 123456 2023-01-15 10:35 /data/anr/anr_2023-01-15-10-35-00-123.txt</code></p> <pre><code>----- pid 8765 at 2023-01-15 10:35:00 -----\nCmd line: com.example.myapp\n\nDALVIK THREADS (15):\n\"main\" prio=5 tid=1 Blocked\n  | group=\"main\" sCount=1 dsCount=0 flags=1 obj=0x12c08a00 self=0xb4800200\n  | sysTid=8765 nice=0 cgrp=top-app sched=0/0 handle=0xb73ff4f4\n  | state=S schedstat=( 0 0 0 ) utm=93 stm=42 core=0 HZ=100\n  | stack=0xbe227000-0xbe229000 stackSize=8MB\n  | held mutexes= \"mutator lock\"(shared held)\n  at com.example.myapp.HeavyComputation.perform(HeavyComputation.java:25)\n  - waiting to lock &lt;0x09a8f2c8&gt; (a java.lang.Object) held by thread tid=10\n...\n</code></pre> <p>I found one recent ANR trace for <code>com.example.myapp</code>. It seems the main thread was blocked waiting for a lock.</p> <pre><code>### 2.4.2 Application Crash Logs\n\nThese logs provide information about app crashes, including tombstones (native crashes) and Java crash reports.\n\n**How to ask your AI assistant:**\n\n&gt; \"Check for any application crash logs on `emulator-5554`.\"\n&gt; \"Show me the latest crash reports from `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `device_crash_logs` tool.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/device_diagnostics/#android-application-crash-reports","title":"Android Application Crash Reports","text":""},{"location":"user_manual/device_diagnostics/#system-tombstones","title":"System Tombstones","text":"<p>Recent system crash tombstones:</p>"},{"location":"user_manual/device_diagnostics/#tombstone-1-tombstone_00","title":"Tombstone #1: tombstone_00","text":"<pre><code>*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\nBuild fingerprint: 'google/sdk_gphone64_x86_64/generic_x86_64:12/SE1A.220601.001/8804948:userdebug/dev-keys'\nRevision: '0'\nABI: 'x86_64'\npid: 9012, tid: 9034, name: Thread-2  &gt;&gt;&gt; com.example.crasher &lt;&lt;&lt;\n...\n</code></pre>"},{"location":"user_manual/device_diagnostics/#dropbox-crash-reports","title":"Dropbox Crash Reports","text":"<p>No crash reports found in dropbox.</p>"},{"location":"user_manual/device_diagnostics/#recent-crashes-in-logcat","title":"Recent Crashes in Logcat","text":"<pre><code>01-15 10:40:15.123  9012  9034 E AndroidRuntime: FATAL EXCEPTION: Thread-2\n01-15 10:40:15.123  9012  9034 E AndroidRuntime: Process: com.example.crasher, PID: 9012\n01-15 10:40:15.123  9012  9034 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference\n...\n</code></pre> <p>I found a tombstone and a recent Java crash in logcat for <code>com.example.crasher</code>.</p> <pre><code>## 2.5 Analyzing Battery Statistics\n\nUnderstand how power is being consumed on the device.\n\n**How to ask your AI assistant:**\n\n&gt; \"Analyze the battery usage on `emulator-5554`.\"\n&gt; \"Show me the battery stats for `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `device_battery_stats` tool.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/device_diagnostics/#battery-statistics-report","title":"Battery Statistics Report \ud83d\udd0b","text":""},{"location":"user_manual/device_diagnostics/#current-battery-status","title":"Current Battery Status","text":"<pre><code>Current Battery Service state:\n  AC powered: false\n  USB powered: true\n  Wireless powered: false\n  Max charging current: 0\n  Max charging voltage: 0\n  Charge counter: 0\n  status: 2\n  health: 2\n  present: true\n  level: 75\n  scale: 100\n  voltage: 4200\n  temperature: 250\n  technology: Li-ion\n</code></pre>"},{"location":"user_manual/device_diagnostics/#key-metrics","title":"Key Metrics","text":"<ul> <li>Battery Level: 75%</li> <li>Temperature: 25.0\u00b0C</li> <li>Health: Good</li> </ul>"},{"location":"user_manual/device_diagnostics/#battery-history-and-usage","title":"Battery History and Usage","text":"<p>... (Details on discharge history and power consumption)</p> <pre><code>This can help identify apps or processes that are draining the battery.\n\n## 2.6 Generating Bug Reports\n\nA bug report is a comprehensive archive of diagnostic information, including system logs, device state, running processes, and more. It's very useful for in-depth debugging.\n\n**How to ask your AI assistant:**\n\n&gt; \"Generate a bug report for `emulator-5554`.\"\n&gt; \"Capture a bug report from `your_device_serial` and include screenshots.\"\n&gt; \"Create a bug report for `emulator-5554`, save it to `/tmp/my_bug_report.zip`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `capture_bugreport` tool.\n*   `output_path` (optional): Local path on the DroidMind server machine to save the bug report ZIP file. If empty, a summary is returned and the file is saved to a temporary location.\n*   `include_screenshots` (optional, default `True`): Whether to include screenshots.\n*   `timeout_seconds` (optional, default `300`): How long to wait for the bug report.\n\n**Example Response from AI (if `output_path` is provided):**\n</code></pre> <p>Okay, I'm capturing the bug report from emulator-5554. This might take a few minutes... ... Bug report saved to: /tmp/my_bug_report.zip (15.23 MB)</p> <pre><code>**Example Response from AI (if `output_path` is NOT provided):**\n</code></pre> <p>Okay, I'm capturing the bug report... ...</p>"},{"location":"user_manual/device_diagnostics/#bug-report-for-emulator-5554","title":"Bug Report for emulator-5554","text":"<p>Temporary file saved to: <code>/tmp/droidmind_bugreport_XXXXXX/bugreport_emulator-5554.zip</code> (15.23 MB)</p>"},{"location":"user_manual/device_diagnostics/#bug-report-contents","title":"Bug Report Contents","text":"<pre><code>  Length      Date    Time    Name\n---------  ---------- -----   ----\n  1234567  01-15-2023 10:50   bugreport-emulator-5554-2023-01-15-10-50-00.txt\n    56789  01-15-2023 10:50   screenshot.png\n...\n</code></pre> <p>To extract specific information from this bug report, you can use:</p> <ul> <li><code>unzip -o /tmp/droidmind_bugreport_XXXXXX/bugreport_emulator-5554.zip -d &lt;extract_dir&gt;</code> to extract all files</li> <li><code>unzip -o /tmp/droidmind_bugreport_XXXXXX/bugreport_emulator-5554.zip bugreport-*.txt -d &lt;extract_dir&gt;</code> to extract just the main report</li> </ul> <p>Note: This is a temporary file that may be cleaned up by the system later.</p> <pre><code>Bug reports are large and complex. Your AI assistant might be able to help you analyze specific parts of it if you extract them.\n\n## 2.7 Dumping Heap for Memory Analysis\n\nHeap dumps are snapshots of an app's memory, useful for diagnosing memory leaks and understanding object allocation.\n\n**How to ask your AI assistant:**\n\n&gt; \"Dump the Java heap for the app `com.example.memoryhog` on `emulator-5554`.\"\n&gt; \"Capture a native heap dump for process ID `12345` on `your_device_serial` and save it to `/tmp/native_heap.hprof`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `dump_heap` tool.\n*   `package_or_pid`: The app package name or its Process ID (PID).\n*   `output_path` (optional): Local path on the DroidMind server machine to save the heap dump file. If empty, a default temporary location is used.\n*   `native` (optional, default `False`): Whether to capture a native heap dump (C/C++) instead of a Java heap dump. Native dumps often require root.\n*   `timeout_seconds` (optional, default `120`): How long to wait.\n\n**Example Response from AI (for Java heap dump):**\n</code></pre> <p>Capturing Java heap dump for process com.example.memoryhog... ... Java heap dump saved to: /tmp/droidmind_heapdump_XXXXXX/com.example.memoryhog_java_heap_20230115_110530.hprof (5.75 MB)</p> <p>To analyze this Java heap dump:</p> <ol> <li>Convert the file using: <code>hprof-conv /tmp/droidmind_heapdump_XXXXXX/com.example.memoryhog_java_heap_20230115_110530.hprof converted.hprof</code></li> <li>Open in Android Studio's Memory Profiler</li> <li>Or use Eclipse Memory Analyzer (MAT) after conversion</li> </ol> <pre><code>Heap dump analysis is a specialized task. The AI can guide you on how to use tools like Android Studio's Profiler or MAT to analyze the `.hprof` file.\n\n---\n\nNext, we'll learn how to manage files and directories on your devices in **[Chapter 3: File System Operations](./file_system.md)**.\n</code></pre>"},{"location":"user_manual/device_management_actions/","title":"Chapter 7: Device Management Actions","text":"<p>Beyond diagnostics and app interactions, DroidMind also allows your AI assistant to perform crucial device management actions. Currently, this primarily involves rebooting the device into various modes.</p>"},{"location":"user_manual/device_management_actions/#71-rebooting-a-device","title":"7.1 Rebooting a Device","text":"<p>Your AI assistant can instruct DroidMind to reboot a connected Android device. This is useful for applying certain system updates, troubleshooting issues, or accessing special boot modes like recovery or bootloader.</p> <p>How to ask your AI assistant:</p> <p>\"Reboot <code>emulator-5554</code>.\" \"Restart <code>your_device_serial</code> into recovery mode.\" \"On <code>emulator-5554</code>, reboot to the bootloader.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>reboot_device</code> tool.</p> <ul> <li><code>serial</code>: The target device's serial number.</li> <li><code>mode</code> (optional, default <code>normal</code>): Specifies the reboot mode. Valid options are:</li> <li><code>normal</code>: A standard reboot of the Android system.</li> <li><code>recovery</code>: Reboots the device into the Android Recovery environment. This is often used for applying OTA updates, wiping data/cache, or other system-level maintenance.</li> <li><code>bootloader</code> (also known as Fastboot mode on some devices): Reboots the device into its bootloader. This mode is used for flashing firmware images, unlocking the bootloader, and other low-level operations.</li> </ul> <p>Example Response from AI (for a normal reboot):</p> <pre><code>Okay, I am rebooting `emulator-5554` in normal mode.\n(DroidMind internal response: Device emulator-5554 is rebooting in normal mode)\n</code></pre> <p>Example Response from AI (for reboot to recovery):</p> <pre><code>Alright, `your_device_serial` is now rebooting into recovery mode.\n(DroidMind internal response: Device your_device_serial is rebooting in recovery mode)\n</code></pre> <p>Important Considerations:</p> <ul> <li>Device Unavailability: After a reboot command is issued, the device will become temporarily unavailable via ADB until it fully boots up into the selected mode or back into the Android system.</li> <li>Recovery/Bootloader Interaction: DroidMind can initiate the reboot to these modes, but further interaction within recovery or bootloader environments (which often rely on physical button inputs or specific <code>fastboot</code> commands) is typically outside the scope of standard DroidMind ADB shell tools. Specialized workflows or different tools might be needed for those interactions.</li> <li>Risk: Rebooting, especially into recovery or bootloader, is a system-level operation. Ensure you intend to do this, as interrupting boot processes or incorrect operations in these modes can potentially harm the device's software.</li> </ul> <p>With device actions covered, it's crucial to understand DroidMind's safety features in Chapter 8: Security Considerations.</p>"},{"location":"user_manual/example_queries/","title":"Chapter 9: Example AI Assistant Queries &amp; Workflows","text":"<p>This chapter brings together everything we've learned by showcasing practical examples of how you can interact with DroidMind through your AI assistant. These scenarios demonstrate how to combine different DroidMind tools and capabilities to solve common Android development, debugging, and management tasks.</p> <p>Remember to replace placeholders like <code>your_device_serial</code>, <code>com.example.myapp</code>, and file paths with your actual details.</p>"},{"location":"user_manual/example_queries/#91-basic-device-checkup","title":"9.1 Basic Device Checkup","text":"<p>Goal: Get a quick overview of a connected device.</p> <p>Example Conversation with AI:</p> <p>You: \"Hey AI, I just connected a new test device. Can you give me a quick checkup on <code>your_device_serial</code>?\"</p> <p>AI (using DroidMind <code>list_devices</code> and <code>device_properties</code>): \"Okay, <code>your_device_serial</code> (model: Pixel 6, Android Version: 13) is connected. Key properties:</p> <ul> <li>Model: Pixel 6</li> <li>Brand: google</li> <li>Android Version: 13</li> <li>SDK Level: 32</li> <li>Build Number: TP1A.220624.014   Is there anything specific you'd like to know or do with it?\"</li> </ul>"},{"location":"user_manual/example_queries/#92-debugging-an-application-crash","title":"9.2 Debugging an Application Crash","text":"<p>Goal: Investigate why an application is crashing.</p> <p>Example Conversation with AI:</p> <p>You: \"My app <code>com.example.myapp</code> just crashed on <code>emulator-5554</code>. Can you help me figure out why?\"</p> <p>AI (using DroidMind <code>app_logs</code>, <code>device_crash_logs</code>): \"I'm sorry to hear that! Let me check the logs for <code>com.example.myapp</code> on <code>emulator-5554</code> and any general crash reports...</p> <p>(After DroidMind provides data)</p> <p>Okay, I found the following in the app logs for <code>com.example.myapp</code> around the time of the crash:</p> <pre><code>01-15 14:10:05.123 E AndroidRuntime: FATAL EXCEPTION: main\n01-15 14:10:05.123 E AndroidRuntime: Process: com.example.myapp, PID: 12345\n01-15 14:10:05.123 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'void com.example.myapp.SomeObject.doSomething()' on a null object reference\n01-15 14:10:05.123 E AndroidRuntime:  at com.example.myapp.MyActivity.onCreate(MyActivity.java:42)\n...\n</code></pre> <p>It looks like a NullPointerException occurred in <code>MyActivity.java</code> at line 42. You might be trying to use an object <code>SomeObject</code> that hasn't been initialized. Would you like me to check the device's ANR traces as well?\"</p>"},{"location":"user_manual/example_queries/#93-transferring-files-and-verifying","title":"9.3 Transferring Files and Verifying","text":"<p>Goal: Upload a configuration file to the device, then verify its contents.</p> <p>Example Conversation with AI:</p> <p>You: \"Please upload <code>/Users/bliss/Desktop/new_config.xml</code> to <code>/sdcard/AppConfig/</code> on <code>your_device_serial</code>.\"</p> <p>AI (using DroidMind <code>push_file</code>): \"Done! The file <code>new_config.xml</code> has been uploaded to <code>/sdcard/AppConfig/</code> on <code>your_device_serial</code>.\"</p> <p>You: \"Thanks! Now, can you read back the contents of <code>/sdcard/AppConfig/new_config.xml</code> on that device?\"</p> <p>AI (using DroidMind <code>read_file</code>): \"Certainly! Here are the contents of <code>/sdcard/AppConfig/new_config.xml</code>:</p> <pre><code>&lt;config&gt;\n  &lt;setting name=\"feature_alpha\" enabled=\"true\" /&gt;\n  &lt;timeout value=\"5000\" /&gt;\n&lt;/config&gt;\n```\"\n</code></pre>"},{"location":"user_manual/example_queries/#94-cleaning-up-an-application-for-testing","title":"9.4 Cleaning Up an Application for Testing","text":"<p>Goal: Stop an app, clear its data, and then restart it for a fresh test run.</p> <p>Example Conversation with AI:</p> <p>You: \"I need to re-test the onboarding flow for <code>com.example.testapp</code> on <code>emulator-5554</code>. Can you prepare the app for a fresh start?\"</p> <p>AI (using DroidMind <code>stop_app</code>, <code>clear_app_data</code>, then <code>start_app</code>): \"Okay, I will perform the following steps on <code>emulator-5554</code> for <code>com.example.testapp</code>:</p> <ol> <li>Force stop the application.</li> <li>Clear its data and cache.</li> <li>Start the application again.</li> </ol> <p>(After DroidMind operations complete)</p> <p>All done! <code>com.example.testapp</code> has been stopped, its data cleared, and it has been restarted. It should be in a fresh state now.\"</p>"},{"location":"user_manual/example_queries/#95-basic-ui-interaction","title":"9.5 Basic UI Interaction","text":"<p>Goal: Navigate to a specific screen in an app using UI automation tools.</p> <p>You: \"On <code>emulator-5554</code>, I need to open the Settings app and then tap on the 'Network &amp; internet' option. I'll need a screenshot first to see where it is.\"</p> <p>AI (using DroidMind <code>start_app</code>, then <code>screenshot</code>): \"Okay, I'll start the Settings app (<code>com.android.settings</code>) on <code>emulator-5554</code>. One moment... Here's a screenshot of the main Settings screen:</p> <p>[AI displays screenshot]</p> <p>Based on the screenshot, it looks like 'Network &amp; internet' is near the top. Could you give me the approximate coordinates if you see it, or I can try to find it based on text if a future DroidMind version supports that.\"</p> <p>You: \"Okay, from the screenshot, it looks like it's around X 300, Y 500. Please tap there.\"</p> <p>AI (using DroidMind <code>tap</code>): \"Tapping at (300, 500) on <code>emulator-5554</code>... Done! Let me know if that opened the correct screen.\"</p>"},{"location":"user_manual/example_queries/#96-checking-device-resources-before-an-update","title":"9.6 Checking Device Resources before an Update","text":"<p>Goal: Ensure a device has enough space and a good battery level before attempting a large app update.</p> <p>Example Conversation with AI:</p> <p>You: \"I'm about to push a large update for <code>com.mycorp.bigapp</code> to <code>your_device_serial</code>. Can you check its available storage and current battery level?\"</p> <p>AI (using DroidMind <code>shell_command</code> for <code>df -h</code>, and <code>device_battery_stats</code>): \"Let me check those for you on <code>your_device_serial</code>...</p> <p>(After DroidMind provides data)</p> <ul> <li>Storage: The <code>/data</code> partition has 2.5GB free.</li> <li>Battery: Currently at 85% and charging.</li> </ul> <p>It looks like you have sufficient storage and a good battery level for the update.\"</p>"},{"location":"user_manual/example_queries/#97-investigating-a-slow-app","title":"9.7 Investigating a Slow App","text":"<p>Goal: Get initial diagnostics for an app that feels sluggish.</p> <p>You: \"The app <code>com.example.slowapp</code> on <code>emulator-5554</code> has been very slow lately. Can you get me some initial diagnostics? Perhaps its logs and a summary of its manifest?\"</p> <p>AI (using DroidMind <code>app_logs</code>, <code>get_app_manifest</code>): \"I can help with that. I'll fetch the recent logs for <code>com.example.slowapp</code> and its manifest details from <code>emulator-5554</code>...</p> <p>(After DroidMind provides data)</p> <p>Here's a summary:</p> <ul> <li>Logs: I see several 'Choreographer: Skipped X frames!' messages, which often indicate UI jank. There are also some network timeout errors.</li> <li>Manifest: The app requests permissions for <code>INTERNET</code>, <code>ACCESS_FINE_LOCATION</code>, and <code>READ_EXTERNAL_STORAGE</code>. It has 3 activities, 2 services, and 1 broadcast receiver defined.</li> </ul> <p>Based on this, the slowness might be related to UI performance issues or network problems. Would you like to dump the heap for this app or get a full bug report for more detailed analysis?\"</p> <p>These examples are just a starting point. The power of DroidMind lies in its flexibility, allowing your AI assistant to combine these tools in numerous ways to address your specific needs. Don't hesitate to experiment with complex requests and multi-step workflows!</p> <p>This concludes the DroidMind User Manual. For a detailed list of all tools and their parameters, please refer to the MCP Reference.</p> <p>Happy DroidMinding! \ud83e\udd16\u2728</p>"},{"location":"user_manual/file_system/","title":"Chapter 3: File System Operations","text":"<p>DroidMind enables your AI assistant to interact with the file system of your connected Android devices. This chapter covers listing directory contents, reading and writing files, transferring files between your host machine and the device, managing files and directories, and retrieving file statistics.</p> <p>Remember to replace <code>emulator-5554</code> or <code>your_device_serial</code> with your target device's serial, and use appropriate paths in your queries.</p>"},{"location":"user_manual/file_system/#31-listing-directory-contents","title":"3.1 Listing Directory Contents","text":"<p>You can explore the file system by asking your AI to list the contents of a specific directory on the device.</p> <p>How to ask your AI assistant:</p> <p>\"List the contents of <code>/sdcard/Download/</code> on <code>emulator-5554</code>.\" \"Show me the files and folders in <code>/data/local/tmp</code> on <code>your_device_serial</code>.\" \"What's inside the <code>/sdcard/Pictures</code> directory on <code>emulator-5554</code>?\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>list_directory</code> tool with the specified <code>path</code>.</p> <p>Example Response from AI:</p> <pre><code>Okay, here are the contents of `/sdcard/Download/` on `emulator-5554`:\n\n# \ud83d\udcc1 Directory: /sdcard/Download/\n\n**2 files, 1 directories**\n\n## Directories\n\n\ud83d\udcc1 `MySubFolder`\n\n## Files\n\n\ud83d\udcc4 `archive.zip` (1.2 MB)\n\ud83d\udcc4 `document.pdf` (512 KB)\n</code></pre> <p>This output helps you understand the structure and contents of directories on your device.</p>"},{"location":"user_manual/file_system/#32-reading-file-contents","title":"3.2 Reading File Contents","text":"<p>Your AI assistant can read the content of text-based files stored on the device. For very large files or binary files, it's better to pull them to your computer first (see Section 3.5).</p> <p>How to ask your AI assistant:</p> <p>\"Read the file <code>/sdcard/Download/MySubFolder/config.txt</code> on <code>emulator-5554</code>.\" \"Show me the content of <code>/data/local/tmp/output.log</code> on <code>your_device_serial</code>.\" \"What does <code>/sdcard/my_notes.txt</code> on <code>emulator-5554</code> say?\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>read_file</code> tool. By default, there's a <code>max_size</code> limit (around 100KB) to prevent overwhelming the AI with too much data. If a file exceeds this, DroidMind will return an error suggesting to use <code>pull_file</code>.</p> <p>Example Response from AI (for a small text file):</p> <pre><code># File Contents: /sdcard/Download/MySubFolder/config.txt\n\n```text\n# Configuration File\nENABLE_FEATURE_X=true\nAPI_ENDPOINT=https://api.example.com\nDEBUG_MODE=false\n</code></pre> <p>The file <code>config.txt</code> contains these configuration settings.</p> <pre><code>**Example Response from AI (if file is too large):**\n</code></pre>"},{"location":"user_manual/file_system/#file-too-large","title":"\u26a0\ufe0f File Too Large","text":"<p>The file <code>/sdcard/Download/large_log.zip</code> is 5.7 MB, which exceeds the maximum size limit of 100.0 KB.</p> <p>Use <code>pull_file</code> to download this file to your local machine instead.</p> <pre><code>## 3.3 Writing Content to Files\n\nDroidMind can write text content to new or existing files on the device. This is useful for creating configuration files, scripts, or simple text notes directly on the device via your AI.\n\n**How to ask your AI assistant:**\n\n&gt; \"Create a file named `hello.txt` in `/sdcard/` on `emulator-5554` with the content 'Hello, DroidMind!'.\"\n&gt; \"Write 'Test data' to `/data/local/tmp/test.log` on `your_device_serial`.\"\n&gt; \"On `emulator-5554`, save the following text to `/sdcard/notes/meeting_summary.md`:\n&gt; ```markdown\n&gt; # Meeting Summary - 2023-01-15\n&gt; - Discussed project milestones\n&gt; - Agreed on next steps\n&gt; ```\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `write_file` tool, providing the `device_path` and `content`.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/file_system/#file-written-successfully","title":"\u2728 File Written Successfully","text":"<ul> <li>Path: /sdcard/hello.txt</li> <li>Size: 16 bytes</li> <li>Device: emulator-5554</li> </ul> <p>The content has been saved to the file.</p> <pre><code>If the parent directory doesn't exist, DroidMind will attempt to create it first.\n\n## 3.4 Pushing (Uploading) Files to a Device\n\nYou can upload files from the machine where DroidMind is running to a connected Android device.\n\n**How to ask your AI assistant:**\n\n&gt; \"Upload the file `/Users/bliss/Desktop/my_app.apk` to `/sdcard/Download/` on `emulator-5554`.\"\n&gt; \"Push `C:\\Projects\\config.json` to `/data/local/tmp/app_config.json` on `your_device_serial`.\"\n\n**Important:** The `local_path` you specify must be accessible from the machine where the DroidMind server process is running.\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `push_file` tool with `local_path` and `device_path`.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/file_system/#file-uploaded-successfully","title":"\u2705 File Uploaded Successfully","text":"<p>The file <code>my_app.apk</code> (12.5 MB) has been uploaded to <code>/sdcard/Download/</code> on device emulator-5554.</p> <p>Details: 1 file pushed. 2.5 MB/s (12533120 bytes in 4.780s)</p> <pre><code>## 3.5 Pulling (Downloading) Files from a Device\n\nDownload files from an Android device to the machine where DroidMind is running.\n\n**How to ask your AI assistant:**\n\n&gt; \"Download the file `/sdcard/DCIM/Camera/IMG_20230115.jpg` from `emulator-5554` to `/Users/bliss/Pictures/`.\"\n&gt; \"Pull `/data/anr/anr_latest.txt` from `your_device_serial` and save it as `C:\\Logs\\device_anr.txt`.\"\n\n**Important:** The `local_path` you specify will be on the machine where the DroidMind server process is running.\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `pull_file` tool with `device_path` and `local_path`.\n\n**Example Response from AI:**\n</code></pre>"},{"location":"user_manual/file_system/#file-downloaded-successfully","title":"\u2705 File Downloaded Successfully","text":"<p>The file <code>IMG_20230115.jpg</code> (3.1 MB) has been downloaded from device emulator-5554 to <code>/Users/bliss/Pictures/IMG_20230115.jpg</code>.</p> <p>Details: 1 file pulled. 1.8 MB/s (3145728 bytes in 1.690s)</p> <pre><code>If only a directory is provided for `local_path`, the file will be saved in that directory with its original name.\n\n## 3.6 Creating Directories\n\nYour AI assistant can create new directories on the device's file system.\n\n**How to ask your AI assistant:**\n\n&gt; \"Create a directory named `MyProjectData` in `/sdcard/` on `emulator-5554`.\"\n&gt; \"Make a new folder `/data/local/tmp/my_tests/results` on `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `create_directory` tool. It can create parent directories if they don't exist (like `mkdir -p`).\n\n**Example Response from AI:**\n</code></pre> <p>Okay, I've created the directory <code>/sdcard/MyProjectData</code> on <code>emulator-5554</code>. (DroidMind internal response: Successfully created directory /sdcard/MyProjectData)</p> <pre><code>## 3.7 Deleting Files and Directories\n\nDroidMind can delete files or directories (including their contents recursively) from the device.\n\n**How to ask your AI assistant:**\n\n&gt; \"Delete the file `/sdcard/Download/old_archive.zip` from `emulator-5554`.\"\n&gt; \"Remove the directory `/data/local/tmp/test_output` and all its contents from `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `delete_file` tool. It will use `rm -rf` for directories, so be cautious.\n\n**Example Response from AI:**\n</code></pre> <p>I have deleted the file <code>/sdcard/Download/old_archive.zip</code> from <code>emulator-5554</code>. (DroidMind internal response: Successfully deleted /sdcard/Download/old_archive.zip)</p> <pre><code>## 3.8 Checking if a File or Directory Exists\n\nYou can verify the existence of a file or directory at a specific path.\n\n**How to ask your AI assistant:**\n\n&gt; \"Does the file `/sdcard/config.xml` exist on `emulator-5554`?\"\n&gt; \"Check if `/data/local/tmp/my_app_data` is present on `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `file_exists` tool.\n\n**Example Response from AI:**\n</code></pre> <p>Yes, the file <code>/sdcard/config.xml</code> exists on <code>emulator-5554</code>. (DroidMind internal response: True)</p> <pre><code>Or:\n</code></pre> <p>No, the directory <code>/data/local/tmp/my_app_data</code> does not exist on <code>your_device_serial</code>. (DroidMind internal response: False)</p> <pre><code>## 3.9 Getting File/Directory Statistics\n\nRetrieve detailed information about a file or directory, such as its type, size, permissions, and modification date.\n\n**How to ask your AI assistant:**\n\n&gt; \"Get the stats for `/sdcard/DCIM/Camera/IMG_20230115.jpg` on `emulator-5554`.\"\n&gt; \"Show me the details of the directory `/sdcard/Download` on `your_device_serial`.\"\n\n**Expected DroidMind Action:**\n\nDroidMind will use the `file_stats` tool.\n\n**Example Response from AI (for a file):**\n</code></pre>"},{"location":"user_manual/file_system/#file-statistics-sdcarddcimcameraimg_20230115jpg","title":"File Statistics: /sdcard/DCIM/Camera/IMG_20230115.jpg","text":"<ul> <li>Type: File</li> <li>Name: IMG_20230115.jpg</li> <li>Size: 3.1 MB</li> <li>Owner: shell:shell</li> <li>Permissions: -rw-rw---- (read/write for owner/group)</li> <li>Modified: Jan 15 10:30</li> </ul> <pre><code>**Example Response from AI (for a directory):**\n</code></pre>"},{"location":"user_manual/file_system/#directory-statistics-sdcarddownload","title":"Directory Statistics: /sdcard/Download","text":"<ul> <li>Type: Directory</li> <li>Name: Download</li> <li>Size: 4.0 KB (size of directory entry, not contents)</li> <li>Owner: shell:shell</li> <li>Permissions: drwxrwx--x (directory, full perms for owner/group, execute for others)</li> <li>Modified: Jan 14 15:20</li> <li>Files: 5</li> <li>Subdirectories: 2</li> </ul> <pre><code>This information helps in understanding file system usage and managing storage.\n\n---\n\nIn the next chapter, we'll explore how DroidMind can manage applications on your device: **[Chapter 4: Application Management](./app_management.md)**.\n</code></pre>"},{"location":"user_manual/security/","title":"Chapter 8: Security Considerations \ud83d\udee1\ufe0f","text":"<p>DroidMind is designed with security as a core principle. Interacting with Android devices at a low level via ADB presents inherent risks, and DroidMind implements several layers of protection to mitigate these while still providing powerful capabilities to your AI assistant. This chapter outlines DroidMind's security model.</p> <p>As a user, your awareness and responsible usage are key components of overall security.</p>"},{"location":"user_manual/security/#81-droidminds-security-philosophy","title":"8.1 DroidMind's Security Philosophy","text":"<ul> <li>User in Control: You are the ultimate authority. DroidMind provides information and warnings, but the decision to proceed with potentially risky operations (when allowed) rests with you, often through confirmation dialogues presented by your AI assistant.</li> <li>Defense in Depth: Multiple security mechanisms work together, from command validation to risk assessment.</li> <li>Prevent Harm: The primary goal is to prevent unintentional or malicious actions that could damage the device or compromise data.</li> <li>Transparency: DroidMind aims to be clear about the risks associated with certain commands.</li> </ul>"},{"location":"user_manual/security/#82-command-validation-and-sanitization","title":"8.2 Command Validation and Sanitization","text":"<p>All commands, especially shell commands, undergo validation and sanitization before execution.</p> <ul> <li>Allowed Command List: DroidMind maintains an internal list of shell commands that are generally considered safe for common diagnostic and management tasks (e.g., <code>ls</code>, <code>ps</code>, <code>getprop</code>, <code>dumpsys</code>). Commands not on this list are treated with higher scrutiny.</li> <li>Disallowed Command List: A list of inherently dangerous or destructive commands (e.g., <code>mkfs</code>, <code>setprop</code> that could brick a device, direct <code>reboot</code> via shell instead of the dedicated tool) are blocked.</li> <li>Suspicious Pattern Detection: DroidMind scans commands for patterns that often indicate malicious intent or dangerous operations, such as attempts to:</li> <li>Delete critical system files (e.g., <code>rm -rf /system</code>).</li> <li>Write directly to protected system partitions.</li> <li>Chain commands in a way that bypasses safety checks.</li> <li>Input Sanitization: While less aggressive for shell commands to preserve their intent, inputs to tools are generally sanitized to prevent injection attacks if those inputs were to be used in constructing further shell commands (though DroidMind tools prefer to use direct ADB commands over constructing complex shell scripts where possible).</li> </ul> <p>If a command fails these checks, DroidMind will refuse to execute it and will typically return an error message explaining why. Example:</p> <pre><code>Error: Command rejected for security reasons: Command 'setprop' is explicitly disallowed for security reasons.\n</code></pre>"},{"location":"user_manual/security/#83-risk-level-assessment","title":"8.3 Risk Level Assessment","text":"<p>DroidMind assesses the risk level of operations, particularly for shell commands. The risk levels are:</p> <ul> <li><code>SAFE</code>: Benign, read-only commands.</li> <li><code>LOW</code>: Minor state changes or slightly more complex read operations.</li> <li><code>MEDIUM</code>: Commands that might modify non-critical user data or perform more intensive operations (e.g., file redirection, command chaining of safe commands).</li> <li><code>HIGH</code>: Commands that interact with sensitive areas, could potentially disrupt device operation if misused, or are not on the primary allowlist.</li> <li><code>CRITICAL</code>: Commands that are inherently dangerous or explicitly disallowed.</li> </ul> <p>When a command is deemed <code>HIGH</code> or <code>CRITICAL</code> risk, DroidMind will typically prepend a warning to the output, which your AI assistant should relay to you:</p> <pre><code># Command Output from your_device_serial\n\n\u26a0\ufe0f WARNING: This command has been assessed as HIGH risk.\n\n(Actual command output or error follows)\n</code></pre> <p>This warning serves as an explicit heads-up, prompting you to consider the command's implications carefully.</p>"},{"location":"user_manual/security/#84-user-confirmation-for-high-risk-operations","title":"8.4 User Confirmation for High-Risk Operations","text":"<p>While DroidMind itself doesn't directly prompt you for confirmation (as it's a server), it provides risk assessments that your AI assistant (the MCP client) should use to seek your explicit approval before executing high-risk operations.</p> <ul> <li>AI Assistant's Role: When your AI assistant requests DroidMind to perform an action that DroidMind flags as high-risk, the AI assistant is responsible for presenting this risk to you and asking for confirmation.</li> <li>Example Workflow:</li> <li>You ask your AI: \"Delete the folder <code>/sdcard/old_backups</code> on <code>emulator-5554</code>.\"</li> <li>AI translates this to a DroidMind tool call (e.g., <code>delete_file</code> or <code>shell_command</code> with <code>rm -rf</code>).</li> <li>DroidMind assesses <code>rm -rf</code> on a broad path as potentially <code>HIGH</code> risk.</li> <li>DroidMind might execute it but return a warning, or the MCP client (your AI assistant) might have its own policy to ask for confirmation based on the tool name or parameters.</li> <li>Your AI assistant should then ask you: \"Warning: Deleting <code>/sdcard/old_backups</code> is a high-risk operation as it will permanently remove all its contents. Are you sure you want to proceed? (yes/no)\"</li> <li>Only if you confirm will the AI instruct DroidMind to proceed (or confirm the execution if DroidMind already performed it with a warning).</li> </ul> <p>This confirmation step is crucial for preventing accidental data loss or system modification.</p>"},{"location":"user_manual/security/#85-protected-paths","title":"8.5 Protected Paths","text":"<p>DroidMind is particularly cautious about operations targeting critical system paths such as <code>/system</code>, <code>/vendor</code>, <code>/product</code>, <code>/proc</code>, <code>/dev</code>, etc.</p> <ul> <li>Read-only operations (like <code>ls</code> or <code>cat</code>) on these paths might be permitted but flagged as <code>MEDIUM</code> or <code>HIGH</code> risk.</li> <li>Write operations or other modifications to these paths are generally disallowed or would be assessed as <code>CRITICAL</code> risk and blocked by the <code>validate_shell_command</code> checks.</li> </ul>"},{"location":"user_manual/security/#86-principle-of-least-privilege","title":"8.6 Principle of Least Privilege","text":"<p>DroidMind operates with the permissions of the ADB daemon on the device.</p> <ul> <li>Non-Rooted Devices: On most production devices, ADB does not have root access. Therefore, DroidMind cannot perform operations requiring root privileges.</li> <li>Rooted Devices: If your device is rooted and ADB is configured to run as root, DroidMind will inherit these elevated privileges. This significantly increases the potential impact of any command. Exercise extreme caution when using DroidMind with a rooted device where ADB has root access.</li> </ul>"},{"location":"user_manual/security/#87-your-responsibility","title":"8.7 Your Responsibility","text":"<ul> <li>Understand Commands: Even if your AI assistant formulates a command, make an effort to understand what it does, especially if DroidMind or your AI assistant flags it as risky.</li> <li>Secure Your Environment: Ensure the machine running DroidMind is secure, as DroidMind effectively acts as a gateway to your connected Android devices.</li> <li>Review AI Assistant Behavior: Be aware of how your specific AI assistant handles MCP tool calls, confirmations, and risk warnings. Different clients might have different default behaviors.</li> <li>Keep DroidMind Updated: Use the latest version of DroidMind to benefit from any security updates or improvements.</li> </ul> <p>By understanding these security considerations, you can use DroidMind powerfully and safely.</p> <p>Next, let's see DroidMind in action with Chapter 9: Example AI Assistant Queries.</p>"},{"location":"user_manual/shell_commands/","title":"Chapter 5: Shell Command Execution","text":"<p>DroidMind allows your AI assistant to run shell commands directly on your connected Android devices. This provides powerful, low-level access but also comes with responsibilities. This chapter explains how to use this feature, DroidMind's built-in security measures, and how output is handled.</p> <p>Always exercise caution when running shell commands, especially those that modify the system. DroidMind includes safeguards, but understanding the commands you're asking your AI to run is crucial.</p>"},{"location":"user_manual/shell_commands/#51-running-shell-commands","title":"5.1 Running Shell Commands","text":"<p>Your AI assistant can instruct DroidMind to execute a standard ADB shell command on a specified device.</p> <p>How to ask your AI assistant:</p> <p>\"Run the command <code>ls -l /sdcard/</code> on <code>emulator-5554</code>.\" \"Execute <code>dumpsys battery</code> on <code>your_device_serial</code>.\" \"On <code>emulator-5554</code>, run <code>ps -A | grep myapp</code> and show me the first 10 lines.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>shell_command</code> tool.</p> <ul> <li><code>serial</code>: The target device's serial number.</li> <li><code>command</code>: The shell command to execute.</li> <li><code>max_lines</code> (optional, default <code>1000</code>): Limits the number of lines returned. Positive for first N lines, negative for last N lines. <code>None</code> for unlimited (not recommended for large outputs).</li> <li><code>max_size</code> (optional, default <code>100000</code> characters, approx 100KB): Limits the total size of the output returned.</li> </ul> <p>Example Response from AI (for <code>ls -l /sdcard/</code>):</p> <pre><code># Command Output from emulator-5554\n</code></pre> <p>-rw-rw---- 1 u0_a123 sdcard_rw 1024 2023-01-15 10:00 myfile.txt drwxrwx--x 1 u0_a123 sdcard_rw 0 2023-01-14 09:00 Download drwxrwx--x 1 u0_a123 sdcard_rw 0 2023-01-13 08:00 Pictures ... (output may be truncated if it exceeds max_lines or max_size)</p> <pre><code>Here's the listing for `/sdcard/` on `emulator-5554`.\n</code></pre>"},{"location":"user_manual/shell_commands/#52-understanding-command-risk-assessment","title":"5.2 Understanding Command Risk Assessment","text":"<p>DroidMind has a built-in security system to assess the risk of shell commands. This system helps prevent accidental execution of dangerous commands.</p> <ul> <li>Risk Levels: <code>SAFE</code>, <code>LOW</code>, <code>MEDIUM</code>, <code>HIGH</code>, <code>CRITICAL</code>.</li> <li>Allowed Commands: DroidMind maintains a list of generally safe shell commands (like <code>ls</code>, <code>cat</code>, <code>ps</code>, <code>dumpsys</code>, <code>getprop</code>).</li> <li>Disallowed Commands: Destructive commands (like <code>rm -rf /</code>, <code>mkfs</code>, <code>reboot</code> directly via shell) are typically blocked or require higher scrutiny.</li> <li>Suspicious Patterns: Commands containing patterns like <code>rm -rf /system</code> or trying to write to protected system paths are flagged.</li> </ul> <p>How DroidMind Responds to Risky Commands:</p> <ul> <li><code>HIGH</code> or <code>CRITICAL</code> Risk: If a command is assessed as high or critical risk, DroidMind will typically prepend a warning to the output.</li> </ul> <pre><code># Command Output from your_device_serial\n\n\u26a0\ufe0f WARNING: This command has been assessed as HIGH risk.\n</code></pre> <p>(Actual command output or error follows)</p> <pre><code>\n</code></pre> <ul> <li>Security Rejection: If a command is outright disallowed by the security policy (e.g., tries to use a blacklisted command or a highly suspicious pattern), DroidMind will return an error:</li> </ul> <pre><code># Command Output from your_device_serial\n\n\u26a0\ufe0f WARNING: This command has been assessed as CRITICAL risk.\n\nError: Command rejected for security reasons: Command 'reboot' is explicitly disallowed for security reasons\n</code></pre> <p>It's important for you, the user, to pay attention to these warnings. Your AI assistant will relay this information.</p>"},{"location":"user_manual/shell_commands/#53-output-handling-truncation-and-limits","title":"5.3 Output Handling: Truncation and Limits","text":"<p>Shell commands can sometimes produce very large outputs. To prevent overwhelming your AI assistant or your terminal, DroidMind has parameters to control the output size:</p> <ul> <li><code>max_lines</code>: Controls the number of lines returned.</li> <li>Positive value (e.g., <code>100</code>): Returns the first 100 lines.</li> <li>Negative value (e.g., <code>-50</code>): Returns the last 50 lines.</li> <li>Default is <code>1000</code> lines.</li> <li>If <code>None</code> is specified (or a very large number), the command runs without <code>head</code> or <code>tail</code>, but <code>max_size</code> still applies.</li> <li><code>max_size</code>: Controls the total number of characters in the output (default is 100,000, about 100KB).</li> </ul> <p>If the output is truncated due to these limits, DroidMind will usually append a note to the output, for example:</p> <pre><code>...\n[Output truncated: 100000 chars, 1500 lines]\n[Command output truncated: 1500 lines, 97.7 KB]\n</code></pre> <p>How to ask your AI assistant to control output:</p> <p>\"Run <code>logcat -d</code> on <code>emulator-5554</code> and show me only the last 50 lines.\" (AI should infer to use <code>max_lines: -50</code>)</p> <p>\"Execute <code>dumpsys</code> on <code>your_device_serial</code>, but limit the output to 200 lines.\" (AI should infer to use <code>max_lines: 200</code>)</p>"},{"location":"user_manual/shell_commands/#54-security-considerations-for-shell-commands","title":"5.4 Security Considerations for Shell Commands","text":"<p>While DroidMind strives to provide a safe environment, the <code>shell_command</code> tool offers direct access to the device's command line. Keep these points in mind:</p> <ol> <li>Understand the Command: Even if your AI assistant formulates the command, try to understand what it does before approving its execution, especially if DroidMind flags it as medium or high risk.</li> <li>Protected Paths: DroidMind is cautious about commands that write to or heavily interact with system paths like <code>/system</code>, <code>/vendor</code>, <code>/data</code> (except for <code>/data/local/tmp</code> or app-specific data directories when appropriate).</li> <li>No <code>sudo</code> or Root by Default: Standard ADB shell does not run as root. Commands requiring root privileges will fail unless the device is rooted and ADB is configured to run as root (which is a separate, advanced setup).</li> <li>Chain of Trust: You are trusting your AI assistant to formulate commands, and DroidMind to execute them safely within its defined boundaries. Always be the final checkpoint.</li> <li>Idempotency: Shell commands are not always idempotent (running them multiple times might have different effects). Be mindful if asking your AI to re-run commands.</li> </ol> <p>DroidMind's security features (see Chapter 8) are designed to prevent the most common dangerous operations, but user awareness remains key.</p> <p>With shell access covered, let's move on to interacting with the device's user interface in Chapter 6: UI Automation.</p>"},{"location":"user_manual/ui_automation/","title":"Chapter 6: UI Automation","text":"<p>DroidMind empowers your AI assistant to directly interact with the user interface of your Android devices. This allows for automating tasks, testing UI flows, and navigating apps as if a user were physically interacting with the screen. This chapter covers tapping, swiping, inputting text, pressing keys, and starting specific app activities using intents.</p> <p>When using UI automation, it's often helpful to first use the <code>screenshot</code> tool (Chapter 2) to identify coordinates or current UI state.</p>"},{"location":"user_manual/ui_automation/#61-tapping-on-screen-coordinates","title":"6.1 Tapping on Screen Coordinates","text":"<p>Simulate a user tap at a specific X, Y coordinate on the device screen.</p> <p>How to ask your AI assistant:</p> <p>\"Tap at coordinates X 500, Y 1200 on <code>emulator-5554</code>.\" \"On <code>your_device_serial</code>, simulate a tap at the center of a 1080x1920 screen.\" (AI would calculate center: X 540, Y 960)</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>tap</code> tool.</p> <ul> <li><code>x</code>: The X coordinate (pixels from left edge).</li> <li><code>y</code>: The Y coordinate (pixels from top edge).</li> </ul> <p>Example Response from AI:</p> <pre><code>Okay, I've tapped at (500, 1200) on `emulator-5554`.\n(DroidMind internal response: Successfully tapped at (500, 1200))\n</code></pre>"},{"location":"user_manual/ui_automation/#62-performing-swipe-gestures","title":"6.2 Performing Swipe Gestures","text":"<p>Simulate a swipe gesture from a starting point to an ending point on the screen, with an optional duration.</p> <p>How to ask your AI assistant:</p> <p>\"Swipe from (100, 800) to (900, 800) on <code>emulator-5554</code> over 500 milliseconds.\" \"On <code>your_device_serial</code>, perform a short swipe down from X 540, Y 200 to X 540, Y 600.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>swipe</code> tool.</p> <ul> <li><code>start_x</code>, <code>start_y</code>: Starting X and Y coordinates.</li> <li><code>end_x</code>, <code>end_y</code>: Ending X and Y coordinates.</li> <li><code>duration_ms</code> (optional, default <code>300</code>): Duration of the swipe in milliseconds.</li> </ul> <p>Example Response from AI:</p> <pre><code>Alright, I've performed a swipe from (100, 800) to (900, 800) on `emulator-5554`.\n(DroidMind internal response: Successfully swiped from (100, 800) to (900, 800))\n</code></pre> <p>This can be used for scrolling, navigating carousels, etc.</p>"},{"location":"user_manual/ui_automation/#63-inputting-text","title":"6.3 Inputting Text","text":"<p>Type text into the currently focused input field on the device, as if from a keyboard.</p> <p>How to ask your AI assistant:</p> <p>\"Type 'Hello DroidMind' into the active field on <code>emulator-5554</code>.\" \"On <code>your_device_serial</code>, input the text: <code>user@example.com</code>.\"</p> <p>Important: Ensure the desired text field is already focused on the device screen before issuing this command. You might need to use a <code>tap</code> command first to select the field.</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>input_text</code> tool.</p> <ul> <li><code>text</code>: The text string to input.</li> </ul> <p>Example Response from AI:</p> <pre><code>I have input the text \"Hello DroidMind\" on `emulator-5554`.\n(DroidMind internal response: Successfully input text on device)\n</code></pre>"},{"location":"user_manual/ui_automation/#64-pressing-hardwaresoftware-keys","title":"6.4 Pressing Hardware/Software Keys","text":"<p>Simulate pressing a standard Android key using its keycode. This can be used for actions like going Home, Back, adjusting volume, or pressing Power.</p> <p>Common Keycodes:</p> <ul> <li><code>3</code>: HOME</li> <li><code>4</code>: BACK</li> <li><code>24</code>: VOLUME UP</li> <li><code>25</code>: VOLUME DOWN</li> <li><code>26</code>: POWER</li> <li><code>82</code>: MENU (Recent Apps on some devices)</li> </ul> <p>How to ask your AI assistant:</p> <p>\"Press the HOME key on <code>emulator-5554</code>.\" \"On <code>your_device_serial</code>, simulate pressing the BACK button.\" \"Press Volume Up (keycode 24) on <code>emulator-5554</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>press_key</code> tool.</p> <ul> <li><code>keycode</code>: The Android integer keycode.</li> </ul> <p>Example Response from AI:</p> <pre><code>I've pressed the HOME key (keycode 3) on `emulator-5554`.\n(DroidMind internal response: Successfully pressed key HOME)\n</code></pre>"},{"location":"user_manual/ui_automation/#65-starting-activities-using-intents","title":"6.5 Starting Activities using Intents","text":"<p>Launch a specific application component (an Activity) directly using an Android Intent. This is more precise than just starting an app by package name if you know the exact component you want to launch. You can also pass data (extras) to the activity.</p> <p>How to ask your AI assistant:</p> <p>\"Start the activity <code>com.android.settings/.wifi.WifiSettingsActivity</code> on <code>emulator-5554</code>.\" \"On <code>your_device_serial</code>, launch the main activity for <code>com.example.myapp</code>.\" \"Open the URL <code>https://droidmind.dev</code> in Chrome on <code>emulator-5554</code> by starting an intent for package <code>com.android.chrome</code> activity <code>com.google.android.apps.chrome.Main</code> with an extra string <code>url</code> set to <code>https://droidmind.dev</code>.\"</p> <p>Expected DroidMind Action:</p> <p>DroidMind will use the <code>start_intent</code> tool.</p> <ul> <li><code>package</code>: The package name of the application (e.g., <code>com.android.settings</code>).</li> <li><code>activity</code>: The activity name to start. This can be a relative name (e.g., <code>.SettingsActivity</code>, assuming the <code>package</code> is <code>com.android.settings</code>) or a fully qualified name (e.g., <code>com.android.settings.SettingsActivity</code>).</li> <li><code>extras</code> (optional): A dictionary of key-value pairs to pass as intent extras. For example, <code>{\"url\": \"https://example.com\", \"user_id\": \"123\"}</code>. Values are treated as strings.</li> </ul> <p>Example Response from AI (opening Wi-Fi settings):</p> <pre><code>Okay, I've started the Wi-Fi Settings activity on `emulator-5554`.\n(DroidMind internal response: Successfully started com.android.settings/.wifi.WifiSettingsActivity)\n</code></pre> <p>Example Response from AI (opening a URL in Chrome):</p> <pre><code>I've launched Chrome on `emulator-5554` with the URL `https://droidmind.dev`.\n(DroidMind internal response: Successfully started com.android.chrome/com.google.android.apps.chrome.Main)\n</code></pre> <p>Tips for UI Automation:</p> <ul> <li>Coordinates: Screen coordinates (X, Y) are usually 0,0 from the top-left. The exact screen dimensions can be found using <code>device_properties</code> (look for properties like <code>ro.surface_flinger.primary_display_width</code>).</li> <li>Timing: UI elements might take time to appear or respond. If a sequence of UI actions fails, your AI might need to be instructed to add small delays or checks (e.g., take a screenshot to verify state) between steps.</li> <li>Context: UI automation tools operate on the current screen. Ensure the app and screen you intend to interact with are active and visible.</li> </ul> <p>Next, we'll look at other device management actions like rebooting in Chapter 7: Device Management Actions.</p>"}]}